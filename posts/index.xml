<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Joe T</title>
		<link>https://the.chuntering.dev/posts/</link>
		<description>Recent content in Posts on Joe T</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-gb</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 13 Jan 2020 01:00:43 +0000</lastBuildDate>
		<atom:link href="https://the.chuntering.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Pixel Games in Rust With ggez - Fixing Blurry Images</title>
			<link>https://the.chuntering.dev/posts/fixing-blurry-pixel-art-in-rust-ggez-games/</link>
			<pubDate>Mon, 13 Jan 2020 01:00:43 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/fixing-blurry-pixel-art-in-rust-ggez-games/</guid>
			<description>TL; DR - if you are making a pixel art game with rust + ggez and scaling the textures, then you probably want to set the default filtering to Nearest, with the line
graphics::set_default_filter(ctx,graphics::FilterMode::Nearest);The problem This basic ggez example that draws an image to the screen.
useggez;useggez::event;useggez::graphics;useggez::nalgebra;useggez::{Context,GameResult};struct MainState{image: graphics::Image,}implMainState{fn new(ctx: &amp;amp;mutContext)-&amp;gt; GameResult&amp;lt;MainState&amp;gt;{lets=MainState{image: graphics::Image::new(ctx,&amp;#34;/map.png&amp;#34;)?,};Ok(s)}}implevent::EventHandlerforMainState{fn update(&amp;amp;mutself,_ctx: &amp;amp;mutContext)-&amp;gt; GameResult{Ok(())}fn draw(&amp;amp;mutself,ctx: &amp;amp;mutContext)-&amp;gt; GameResult{graphics::draw(ctx,&amp;amp;self.image,graphics::DrawParam::new().scale(nalgebra::Vector2::new(3.0,3.0)),)?;graphics::present(ctx)?;Ok(())}}pubfn main()-&amp;gt; GameResult{letcb=ggez::ContextBuilder::new(&amp;#34;pixel art example&amp;#34;,&amp;#34;ggez&amp;#34;);let(ctx,event_loop)=&amp;amp;mutcb.build()?;letstate=&amp;amp;mutMainState::new(ctx)?;event::run(ctx,event_loop,state)}The result is not what you might expect if you&#39;re looking for crisp pixel art.</description>
			<content type="html"><![CDATA[<p>TL; DR - if you are making a pixel art game with rust + ggez and scaling the textures,
then you probably want to set the default filtering to <code>Nearest</code>, with the line</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="n">graphics</span>::<span class="n">set_default_filter</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">graphics</span>::<span class="n">FilterMode</span>::<span class="n">Nearest</span><span class="p">)</span><span class="p">;</span><span class="w">
</span></code></pre></div><h1 id="the-problem">The problem</h1>
<p>This basic <code>ggez</code> example that draws an image to the screen.</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">ggez</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">ggez</span>::<span class="n">event</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">ggez</span>::<span class="n">graphics</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">ggez</span>::<span class="n">nalgebra</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">ggez</span>::<span class="p">{</span><span class="n">Context</span><span class="p">,</span><span class="w"> </span><span class="n">GameResult</span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">MainState</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="n">image</span>: <span class="nc">graphics</span>::<span class="n">Image</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">MainState</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">ctx</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Context</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">GameResult</span><span class="o">&lt;</span><span class="n">MainState</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MainState</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">            </span><span class="n">image</span>: <span class="nc">graphics</span>::<span class="n">Image</span>::<span class="n">new</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;/map.png&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="nb">Ok</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">event</span>::<span class="n">EventHandler</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">MainState</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">update</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_ctx</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Context</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">GameResult</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="nb">Ok</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">draw</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">ctx</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Context</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">GameResult</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="n">graphics</span>::<span class="n">draw</span><span class="p">(</span><span class="w">
</span><span class="w"></span><span class="w">            </span><span class="n">ctx</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">            </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">image</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">            </span><span class="n">graphics</span>::<span class="n">DrawParam</span>::<span class="n">new</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="n">scale</span><span class="p">(</span><span class="n">nalgebra</span>::<span class="n">Vector2</span>::<span class="n">new</span><span class="p">(</span><span class="mf">3.0</span><span class="p">,</span><span class="w"> </span><span class="mf">3.0</span><span class="p">)</span><span class="p">)</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="n">graphics</span>::<span class="n">present</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="nb">Ok</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">GameResult</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">cb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ggez</span>::<span class="n">ContextBuilder</span>::<span class="n">new</span><span class="p">(</span><span class="s">&#34;pixel art example&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;ggez&#34;</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">event_loop</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">cb</span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">MainState</span>::<span class="n">new</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="n">event</span>::<span class="n">run</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">event_loop</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>The result is not what you might expect if you're looking for crisp pixel art.
You end up with the blurry image below.
<figure>
    <img src="/blurry_character.png"/> <figcaption>
            <h4>Blurry character</h4>
        </figcaption>
</figure>

There are two ways around this.</p>
<h2 id="set-the-default-filtering-mode-for-all-images-to-filtermodenearest">Set the default filtering mode for all images to FilterMode::Nearest</h2>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">GameResult</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">cb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ggez</span>::<span class="n">ContextBuilder</span>::<span class="n">new</span><span class="p">(</span><span class="s">&#34;pixel art example&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;ggez&#34;</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="n">graphics</span>::<span class="n">set_default_filter</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">graphics</span>::<span class="n">FilterMode</span>::<span class="n">Nearest</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">event_loop</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">cb</span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">MainState</span>::<span class="n">new</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="n">event</span>::<span class="n">run</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">event_loop</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="set-the-filter-mode-on-an-image-by-image-basis">Set the filter mode on an image by image basis</h2>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="w"> </span><span class="n">MainState</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">ctx</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">Context</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">GameResult</span><span class="o">&lt;</span><span class="n">MainState</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">image</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">graphics</span>::<span class="n">Image</span>::<span class="n">new</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;/map.png&#34;</span><span class="p">)</span><span class="o">?</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="n">image</span><span class="p">.</span><span class="n">set_filter</span><span class="p">(</span><span class="n">graphics</span>::<span class="n">FilterMode</span>::<span class="n">Nearest</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MainState</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">image</span><span class="w"> </span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="w">        </span><span class="nb">Ok</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="result">Result</h2>
<p>In our example, since we're only drawing a single image, the result is the same, nice crisp, non-blurry pixel art!
<figure>
    <img src="/crisp_character.png"/> <figcaption>
            <h4>Crisp character</h4>
        </figcaption>
</figure>
</p>
<h3 id="links">links</h3>
<ul>
<li>I first needed this for OpenMoonstone <a href="https://github.com/joetsoi/OpenMoonstone/commit/cd40ecdafc31a351a4cfd0ef9600d3f6e6783212">https://github.com/joetsoi/OpenMoonstone/commit/cd40ecdafc31a351a4cfd0ef9600d3f6e6783212</a></li>
<li>I've noticed other people have run into this as well <a href="https://github.com/ggez/ggez/issues/516">https://github.com/ggez/ggez/issues/516</a></li>
<li>Art from <a href="https://opengameart.org/content/a-platformer-in-the-forest">https://opengameart.org/content/a-platformer-in-the-forest</a></li>
</ul>
<p>Hopefully this will save some other people a bit of time!</p>
]]></content>
		</item>
		
		<item>
			<title>Django Admin Single Line Unlimited Input For Postgres</title>
			<link>https://the.chuntering.dev/posts/django-admin-single-line-unlimited-input/</link>
			<pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/django-admin-single-line-unlimited-input/</guid>
			<description>If you need a single line input for a CharField in django admin but want unlimited length input? Are you using postgres? Then you can use this snippet.
 varchar(n) is Bad See https://wiki.postgresql.org/wiki/Don%27t_Do_This#Don.27t_use_varchar.28n.29_by_default
Why not TextArea? Why not use TextArea? This defaults to a multiline input, and you&#39;d need to override it for every single CharField you use.
https://stackoverflow.com/questions/3469979/django-admin-overriding-the-widget-of-a-custom-form-field/4466958#4466958
How does it work? We override the database used in the CharField and just use varchar, This is the same perfomance wise as varchar(n) and text.</description>
			<content type="html"><![CDATA[<p>If you need a single line input for a <code>CharField</code> in django admin but want
unlimited length input? Are you using postgres? Then you can use this snippet.</p>
<script type="application/javascript" src="https://gist.github.com/joetsoi/8158748202e5174dbf72c8daa8e71dcb.js"></script>

<h1 id="varcharn-is-bad"><code>varchar(n)</code> is Bad</h1>
<p>See <a href="https://wiki.postgresql.org/wiki/Don%27t_Do_This#Don.27t_use_varchar.28n.29_by_default">https://wiki.postgresql.org/wiki/Don%27t_Do_This#Don.27t_use_varchar.28n.29_by_default</a></p>
<h1 id="why-not-textarea">Why not <code>TextArea</code>?</h1>
<p>Why not use <code>TextArea</code>? This defaults to a multiline input, and you'd need
to override it for every single <code>CharField</code> you use.</p>
<p><a href="https://stackoverflow.com/questions/3469979/django-admin-overriding-the-widget-of-a-custom-form-field/4466958#4466958">https://stackoverflow.com/questions/3469979/django-admin-overriding-the-widget-of-a-custom-form-field/4466958#4466958</a></p>
<h1 id="how-does-it-work">How does it work?</h1>
<p>We override the database used in the <code>CharField</code> and just use <code>varchar</code>,
This is the same perfomance wise as <code>varchar(n)</code> and <code>text</code>.</p>
<p>There's also the django based python check and where we pass in <code>sys.maxsize</code> so we
cover most possible sizes.</p>
<p><a href="https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.CharField.max_length">https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.CharField.max_length</a></p>
<h2 id="other-people-who-have-also-done-this">Other people who have also done this.</h2>
<p>Jacob Kaplan-Moss also go annoyed enough to to this as well.
<a href="https://github.com/jacobian/django-postgres-unlimited-varchar">https://github.com/jacobian/django-postgres-unlimited-varchar</a></p>
<p>Looks like he skips the size check entirely. Not knowing the internals of django
admin as well as he does, I opted for letting the code run without messing
with it too much.</p>
<p>Glad I'm not the only one who was bugged by this.</p>
]]></content>
		</item>
		
		<item>
			<title>OpenMoonstone V0.2 Released</title>
			<link>https://the.chuntering.dev/posts/openmoonstone-v0-2-released/</link>
			<pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/openmoonstone-v0-2-released/</guid>
			<description>OpenMoonstone v0.2 released OpenMoonstone is a open source reimplementation of Moonstone: A Hard Day&#39;s Knight following along the lines of projects like OpenTTD and OpenXcom. You can try it out https://github.com/joetsoi/OpenMoonstone
This release is a milestone as it contains the same number of features as the original demo that came out on the Amiga.
Why reimplement an old game? Fixing bugs   Original     OpenMoonstone v0.2   Enemies always face the player in Moonstone, in the original this meant that for the AI controlled knights, the distance the knight would move was out of sync with the animation causing a &amp;ldquo;jumpy&amp;rdquo; animation.</description>
			<content type="html"><![CDATA[<h1 id="openmoonstone-v02-released">OpenMoonstone v0.2 released</h1>
<p>OpenMoonstone is a open source reimplementation of Moonstone: A Hard Day's Knight following along the lines of projects like OpenTTD and OpenXcom. You can try it out <a href="https://github.com/joetsoi/OpenMoonstone">https://github.com/joetsoi/OpenMoonstone</a></p>
<p>This release is a milestone as it contains the same number of features as the original demo that came out on the Amiga.</p>
<h2 id="why-reimplement-an-old-game">Why reimplement an old game?</h2>
<h3 id="fixing-bugs">Fixing bugs</h3>
<p><figure>
    <img src="/oldbk-opt.gif"/> <figcaption>
            <h4>Original</h4>
        </figcaption>
</figure>

<figure>
    <img src="/newbk-opt.gif"/> <figcaption>
            <h4>OpenMoonstone v0.2</h4>
        </figcaption>
</figure>
</p>
<p>Enemies always face the player in Moonstone, in the original this meant that for the AI controlled knights, the distance the knight would move was out of sync with the animation causing a &ldquo;jumpy&rdquo; animation.</p>
<h3 id="adding-new-features">Adding New Features</h3>
<p>I've added the ability for four players to fight at once. The amiga only had two controller ports so was restricted to two players, as a child I always wanted a three way battle with my brothers and adding additional entities in an ECS is easy once it's all set up.
<figure>
    <img src="/4players.png"/> <figcaption>
            <h4>four players at once</h4>
        </figcaption>
</figure>
</p>
<h3 id="as-a-side-project">As a side project</h3>
<p>It's hard to stay motivated when working on a side project, but this has a few advantages</p>
<ul>
<li>Predefined scope (it's done when it matches original).</li>
<li>No need to create any art assets</li>
<li>Fueled by nostalgia.</li>
<li>A good way to try out a new programming language (Rust in this case).</li>
</ul>
<p>But it has some distinct disadvantages</p>
<ul>
<li>Reverse engineering 16bit x86 is time consuming. (Avoid doing this if you can)</li>
</ul>
<p>This is the probably the furthest I've ever got with a side project, in the future it would be nice to add modding or other features, but that's for another day.</p>
]]></content>
		</item>
		
		<item>
			<title>Horrible Things I Regret Doing With Python</title>
			<link>https://the.chuntering.dev/posts/horrible-things-i-regret-doing-with-python/</link>
			<pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/horrible-things-i-regret-doing-with-python/</guid>
			<description>Runtime Copy Paste With Global Variable Replacement. &amp;ldquo;Could you make InlineAdmin in Django paginatable Joe?&amp;rdquo; Guido asked. I googled a while before regurgitating a Stackoverflow answer into Guido&#39;s lap. &amp;ldquo;Oh cool, but we have multiple InlineAdmins, can you make it paginate for all of them?&amp;rdquo; &amp;ldquo;Sure&amp;rdquo; I replied, &amp;ldquo;That&#39;ll just be a change to the admin class and some templates&amp;rdquo;
&amp;hellip; Time passes
I had quickly changed the p variable so it was dynamically determined by the model name assigned to the InlineAdmin class by adding a page_param property.</description>
			<content type="html"><![CDATA[<h2 id="runtime-copy-paste-with-global-variable-replacement">Runtime Copy Paste With Global Variable Replacement.</h2>
<p>&ldquo;Could you make <code>InlineAdmin</code> in Django paginatable Joe?&rdquo; Guido asked.
I googled a while before regurgitating a Stackoverflow answer into Guido's lap.
&ldquo;Oh cool, but we have multiple <code>InlineAdmins</code>, can you make it paginate for all of them?&rdquo;
&ldquo;Sure&rdquo; I replied, &ldquo;That'll just be a change to the admin class and some templates&rdquo;</p>
<p>&hellip; Time passes</p>
<p>I had quickly changed the <code>p</code> variable so it was dynamically determined by the model name assigned to the <code>InlineAdmin</code> class by adding a <code>page_param</code> property. The only problem was I that needed django's <code>paginator_number</code> template tag to take into account these new page variables as well.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">django.contrib.admin.views.main</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">ALL_VAR</span><span class="p">,</span> <span class="n">ORDER_VAR</span><span class="p">,</span> <span class="n">PAGE_VAR</span><span class="p">,</span> <span class="n">SEARCH_VAR</span><span class="p">,</span>
<span class="p">)</span>

<span class="o">.</span><span class="o">.</span><span class="o">.</span>

<span class="nd">@register.simple_tag</span>
<span class="k">def</span> <span class="nf">paginator_number</span><span class="p">(</span><span class="n">cl</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span><span class="p">:</span>
    <span class="sa"></span><span class="s2">&#34;&#34;&#34;</span><span class="s2">
</span><span class="s2"></span><span class="s2">    Generates an individual page index link in a paginated list.</span><span class="s2">
</span><span class="s2"></span><span class="s2">    </span><span class="s2">&#34;&#34;&#34;</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">DOT</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">... </span><span class="s1">&#39;</span>
    <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="n">cl</span><span class="o">.</span><span class="n">page_num</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">format_html</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">&lt;span class=</span><span class="s1">&#34;</span><span class="s1">this-page</span><span class="s1">&#34;</span><span class="s1">&gt;{}&lt;/span&gt; </span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">format_html</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">&lt;a href=</span><span class="s1">&#34;</span><span class="s1">{}</span><span class="s1">&#34;</span><span class="s1">{}&gt;{}&lt;/a&gt; </span><span class="s1">&#39;</span><span class="p">,</span>
                           <span class="n">cl</span><span class="o">.</span><span class="n">get_query_string</span><span class="p">(</span><span class="p">{</span><span class="n">PAGE_VAR</span><span class="p">:</span> <span class="n">i</span><span class="p">}</span><span class="p">)</span><span class="p">,</span>
                           <span class="n">mark_safe</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1"> class=</span><span class="s1">&#34;</span><span class="s1">end</span><span class="s1">&#34;</span><span class="s1">&#39;</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">cl</span><span class="o">.</span><span class="n">paginator</span><span class="o">.</span><span class="n">num_pages</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">else</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">,</span>
<span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>The main problem being that <code>PAGE_VAR</code> is a global variable in <code>paginator_number</code> and I was trying as hard as possible to avoid copy pasting. I pondered for a while before writing out the code vomit in the next sample.</p>
<p>&ldquo;Can you see what he's doing?&rdquo; Tom called out, slightly exasperated as he looked at the hideous code I  had concocted. I cackled slightly as the other devs gathered around my desk, the faint glow of monitor lighting their faces.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ln"> 1</span><span class="kn">import</span> <span class="nn">copy</span>
<span class="ln"> 2</span><span class="kn">import</span> <span class="nn">types</span>
<span class="ln"> 3</span>
<span class="ln"> 4</span><span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">Library</span>
<span class="ln"> 5</span><span class="kn">from</span> <span class="nn">django.contrib.admin.templatetags.admin_list</span> <span class="kn">import</span> <span class="p">(</span>
<span class="ln"> 6</span>    <span class="n">paginator_number</span><span class="p">,</span>
<span class="ln"> 7</span>    <span class="n">pagination</span>
<span class="ln"> 8</span><span class="p">)</span>
<span class="ln"> 9</span>
<span class="ln">10</span><span class="n">register</span> <span class="o">=</span> <span class="n">Library</span><span class="p">(</span><span class="p">)</span>
<span class="ln">11</span>
<span class="ln">12</span>
<span class="ln">13</span><span class="nd">@register.simple_tag</span>
<span class="ln">14</span><span class="k">def</span> <span class="nf">parameterized_paginator_number</span><span class="p">(</span><span class="n">cl</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span><span class="p">:</span>
<span class="ln">15</span>    <span class="sa"></span><span class="s1">&#39;&#39;&#39;</span><span class="s1">This ridiculous code makes a copy of paginator_number function</span><span class="s1">
</span><span class="ln">16</span><span class="s1"></span><span class="s1">    The PAGE_VAR variable is global in paginator number, this</span><span class="s1">
</span><span class="ln">17</span><span class="s1"></span><span class="s1">    function copies paginator_number and replaces the global PAGE_VAR</span><span class="s1">
</span><span class="ln">18</span><span class="s1"></span><span class="s1">    with a page_param that we can set.</span><span class="s1">
</span><span class="ln">19</span><span class="s1"></span><span class="s1">    </span><span class="s1">&#39;&#39;&#39;</span>
<span class="ln">20</span>    <span class="c1"># copy the globals of paginator_number</span>
<span class="ln">21</span>    <span class="n">func_globals_copy</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">paginator_number</span><span class="o">.</span><span class="vm">__globals__</span><span class="p">)</span>
<span class="ln">22</span>    <span class="n">func_globals_copy</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">PAGE_VAR</span><span class="s1">&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cl</span><span class="o">.</span><span class="n">page_param</span>
<span class="ln">23</span>
<span class="ln">24</span>    <span class="n">paginator_number_func_copy</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">FunctionType</span><span class="p">(</span>
<span class="ln">25</span>        <span class="n">code</span><span class="o">=</span><span class="n">paginator_number</span><span class="o">.</span><span class="vm">__code__</span><span class="p">,</span>
<span class="ln">26</span>        <span class="c1"># pass our updated globals</span>
<span class="ln">27</span>        <span class="nb">globals</span><span class="o">=</span><span class="n">func_globals_copy</span><span class="p">,</span>
<span class="ln">28</span>        <span class="n">name</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">parameterized_paginator_number</span><span class="s1">&#39;</span><span class="p">,</span>
<span class="ln">29</span>        <span class="n">argdefs</span><span class="o">=</span><span class="n">paginator_number</span><span class="o">.</span><span class="vm">__defaults__</span><span class="p">,</span>
<span class="ln">30</span>        <span class="n">closure</span><span class="o">=</span><span class="n">paginator_number</span><span class="o">.</span><span class="vm">__closure__</span><span class="p">,</span>
<span class="ln">31</span>    <span class="p">)</span>
<span class="ln">32</span>    <span class="k">return</span> <span class="n">paginator_number_func_copy</span><span class="p">(</span><span class="n">cl</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span></code></pre></div>
<p>&ldquo;It's runtime copy pasting, what the hell is wrong with you?&rdquo;</p>
<p>Here we use copy to make a copy of django's <code>paginator_number</code>'s global (line 21). Then, in a horrible twist, we replace the <code>PAGE_VAR</code> in our new dict (line 22).</p>
<p>In line 24-31, we use the types library to create a new function. With exactly the same code as <code>paginator_number</code>, but crucially in line 27, we pass in our <code>func_globals_copy</code>, which contains the replaced <code>PAGE_VAR</code> global. Then we invoke our new <code>paginator_number</code> function copy and all is well.</p>
<p>Under the hood, each python function has a reference to a dict containing all the globals that the function uses, all we are doing is badly abusing this. #sorrynotsorry as they say.</p>
<p>&ldquo;This is your fault django, you made me do this&rdquo;, I blurted out in some feeble attempt at an excuse following up with &ldquo;I think it's less brittle than plain copy-pasting though&rdquo;.</p>
<p>&ldquo;I actually agree.&rdquo; Tom said doing his best Patrick Stewart facepalm.</p>
]]></content>
		</item>
		
		<item>
			<title>A Hard Days Knight</title>
			<link>https://the.chuntering.dev/posts/a-hard-days-knight/</link>
			<pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/a-hard-days-knight/</guid>
			<description>After many hours I&#39;ve succeeded in reverse engineering a small part of the old DOS game Moonstone!I plan on posting all the gory details, but it&#39;s a bit late at the moment but just running the image viewer script I hacked together and seeing the working result is so pleasing.</description>
			<content type="html"><![CDATA[<p><img src="/mindscap.png" alt="mindscape">
After many hours I've succeeded in reverse engineering a small part of the old DOS game Moonstone!I plan on posting all the gory details, but it's a bit late at the moment but just running the image viewer script I hacked together and seeing the working result is so pleasing.</p>
]]></content>
		</item>
		
		<item>
			<title>SQLTap and CKAN</title>
			<link>https://the.chuntering.dev/posts/sqltap-and-ckan/</link>
			<pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/sqltap-and-ckan/</guid>
			<description>Are you a CKAN developer? Have you had a trip or fall at work involving a slow running sql query that wasn&#39;t your fault? Do you terribly miss the django debug toolbar, pyramid debugtoolbar, flask debugtoolbar or similar? Well you&#39;re basically screwed, but to help alleviate the pain I made a tiny ckan extension that integrates the SQLTap middleware with ckan, once you&#39;ve added &amp;lsquo;sqltap&amp;rsquo; to your list of plugins in your development init you&#39;ll find the sqltap interface at</description>
			<content type="html"><![CDATA[<p>Are you a CKAN developer? Have you had a trip or fall at work involving a slow running sql query that wasn't your fault? Do you terribly miss the <a href="https://github.com/django-debug-toolbar/django-debug-toolbar">django debug toolbar</a>, <a href="https://github.com/Pylons/pyramid_debugtoolbar">pyramid debugtoolbar</a>, <a href="https://pypi.python.org/pypi/Flask-DebugToolbar">flask debugtoolbar</a> or similar? Well you're basically screwed, but to help alleviate the pain I made a <a href="https://github.com/joetsoi/ckanext-sqltap">tiny ckan extension</a> that integrates the <a href="http://sqltap.inconshreveable.com/">SQLTap middleware</a> with ckan, once you've added &lsquo;sqltap&rsquo; to your list of plugins in your development init you'll find the sqltap interface at</p>
<p>http://localhost:5000/<strong>sqltap</strong></p>
<p>When you run the paster development server. Please don't cry when you see the results there, we'll get round to implementing <a href="https://github.com/ckan/ckan/issues/2353">dogpile caching</a> eventually</p>
]]></content>
		</item>
		
		<item>
			<title>Translating Ckan Extensions Using The ITranslations Interface</title>
			<link>https://the.chuntering.dev/posts/translating-ckan-extensions-using-itranslations-interface/</link>
			<pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/translating-ckan-extensions-using-itranslations-interface/</guid>
			<description>From ckan 2.5 onwards you will be able to translate the strings in ckan extensions in a much more friendly and easy way. Unless there are any major issues in the code review, this pull request should make your life easier.
Previously, there were a few, not ideal solutions (see ckan#959) which involved having a paster command or script that would munge all the po/mo files together using gettext&#39;s msgcat command.</description>
			<content type="html"><![CDATA[<p>From ckan 2.5 onwards you will be able to translate the strings in ckan extensions in a much more friendly and easy way. Unless there are any major issues in the code review, <a href="https://github.com/ckan/ckan/pull/2461">this pull request</a> should make your life easier.</p>
<p>Previously, there were a few, not ideal solutions (see <a href="https://github.com/ckan/ckan/issues/959">ckan#959</a>) which involved having a paster command or script that would munge all the po/mo files together using gettext's msgcat command.</p>
<p>This has the downside that the sysadmin of any ckan instance would have to run this script and whatever other series of texts whenever they had a new ckan extension that they wanted to add.</p>
<p>The new pull request allows extension writers to provide a translations that will automatically be included without any additional steps other than the standard step specifying the plugin in the ckan.plugins in the configuration file.</p>
<p>To do this you'll need to copy the example plugin and edit your plugin so it looks a bit like</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">.</span><span class="o">.</span><span class="o">.</span>
<span class="kn">from</span> <span class="nn">ckan.lib.plugins</span> <span class="kn">import</span> <span class="n">DefaultTranslation</span>
<span class="o">.</span><span class="o">.</span><span class="o">.</span>

<span class="k">class</span> <span class="nc">MyPlugin</span><span class="p">(</span><span class="n">plugins</span><span class="o">.</span><span class="n">SingletonPlugin</span><span class="p">,</span> <span class="n">DefaultTranslation</span><span class="p">)</span><span class="p">:</span>
    <span class="n">plugins</span><span class="o">.</span><span class="n">implements</span><span class="p">(</span><span class="n">plugins</span><span class="o">.</span><span class="n">ITranslation</span><span class="p">)</span>
<span class="o">.</span><span class="o">.</span><span class="o">.</span>
</code></pre></div><p>The <code>ITranslation</code> interface and <code>DefaultTranslation</code> will mean that ckan will look for a directory in your extension <code>ckanext/&lt;your extension&gt;/i18n</code> for possible translations, your translation file for each locale should be <code>ckanext-&lt;your extension&gt;</code>. This is actually a gettext domain, in the future we might be able to add some more flexibility it so that only strings in an extension get overwritten even if they are the same as a ckan core string.</p>
<p>If you need help on gettext and how it works for ckan you should check out <a href="http://docs.ckan.org/en/latest/contributing/i18n.html">the ckan translation docs</a>. Or take a look at the <code>example_itranslation_plugin</code> in the pull request</p>
<p>Given the previous attempts to fix this, I was pleasantly surprised with how much fun I had writing this.</p>
<p>Babel has support for an <a href="http://babel.pocoo.org/docs/support/#extended-translations-class">extended translation class</a> that allows you to merge translations with an existing one. The problem was getting ckan to use it, I was expecting some awful hacks or messy code.</p>
<p>After poking around the source code to babel and pylons, it turns out that pylons eventually passes kwargs from <code>set_lang</code> to <code>_get_translator</code> which passes its keyword arguments to gettext , which is not mentioned in the pylons <a href="https://pylons-webframework.readthedocs.org/en/latest/modules/i18n_translation.html#pylons.i18n.translation.set_lang">documentation</a>. But that is the price you pay for being stuck on an older framework</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">pylons</span><span class="o">/</span><span class="mi">18</span><span class="n">n</span><span class="o">/</span><span class="n">translation</span><span class="o">.</span><span class="n">py</span>

<span class="n">gettext</span> <span class="kn">import</span> <span class="nn">NullTranslations</span><span class="o">,</span> <span class="nn">translation</span>
<span class="o">.</span><span class="o">.</span><span class="o">.</span>
<span class="k">def</span> <span class="nf">_get_translator</span><span class="p">(</span><span class="n">lang</span><span class="p">,</span> <span class="o">*</span><span class="o">*</span><span class="n">kwargs</span><span class="p">)</span><span class="p">:</span>
    <span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="o">.</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">translator</span> <span class="o">=</span> <span class="n">translation</span><span class="p">(</span><span class="n">conf</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.package</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">localedir</span><span class="p">,</span>
                                 <span class="n">languages</span><span class="o">=</span><span class="n">lang</span><span class="p">,</span> <span class="o">*</span><span class="o">*</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">IOError</span><span class="p">,</span> <span class="n">ioe</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">LanguageError</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">IOError: </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">ioe</span><span class="p">)</span>
    <span class="n">translator</span><span class="o">.</span><span class="n">pylons_lang</span> <span class="o">=</span> <span class="n">lang</span>
    <span class="k">return</span> <span class="n">translator</span>

<span class="k">def</span> <span class="nf">set_lang</span><span class="p">(</span><span class="n">lang</span><span class="p">,</span> <span class="o">*</span><span class="o">*</span><span class="n">kwargs</span><span class="p">)</span><span class="p">:</span>
    <span class="n">translator</span> <span class="o">=</span> <span class="n">_get_translator</span><span class="p">(</span><span class="n">lang</span><span class="p">,</span> <span class="o">*</span><span class="o">*</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="o">.</span><span class="o">.</span><span class="o">.</span>
</code></pre></div><p>In gettext <a href="https://docs.python.org/2/library/gettext.html#gettext.translation">translation</a>, you can pass a Translation class in as the class parameter, so all it really involves is getting ckan to tell pylons to use the babel Translation class instead.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">babel.support</span> <span class="kn">import</span> <span class="n">Translations</span>
<span class="o">.</span><span class="o">.</span><span class="o">.</span>
<span class="k">def</span> <span class="nf">_set_lang</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">ckan.i18n_directory</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">:</span>
        <span class="n">fake_config</span> <span class="o">=</span> <span class="p">{</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.paths</span><span class="s1">&#39;</span><span class="p">:</span> <span class="p">{</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">root</span><span class="s1">&#39;</span><span class="p">:</span> <span class="n">config</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">ckan.i18n_directory</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">}</span><span class="p">,</span>
                       <span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.package</span><span class="s1">&#39;</span><span class="p">:</span> <span class="n">config</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.package</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">}</span>
        <span class="n">i18n</span><span class="o">.</span><span class="n">set_lang</span><span class="p">(</span><span class="n">lang</span><span class="p">,</span> <span class="n">pylons_config</span><span class="o">=</span><span class="n">fake_config</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="n">Translations</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">i18n</span><span class="o">.</span><span class="n">set_lang</span><span class="p">(</span><span class="n">lang</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="n">Translations</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">tmpl_context</span><span class="p">)</span><span class="p">:</span>
    <span class="n">lang</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">CKAN_LANG</span><span class="s1">&#39;</span><span class="p">)</span> <span class="ow">or</span> \
        <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">ckan.locale_default</span><span class="s1">&#39;</span><span class="p">,</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">en</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">lang</span> <span class="o">!=</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">en</span><span class="s1">&#39;</span><span class="p">:</span>
        <span class="n">set_lang</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">plugin</span> <span class="ow">in</span> <span class="n">PluginImplementations</span><span class="p">(</span><span class="n">ITranslation</span><span class="p">)</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">lang</span> <span class="ow">in</span> <span class="n">plugin</span><span class="o">.</span><span class="n">i18n_locales</span><span class="p">(</span><span class="p">)</span><span class="p">:</span>
            <span class="n">_add_extra_translations</span><span class="p">(</span><span class="n">plugin</span><span class="o">.</span><span class="n">i18n_directory</span><span class="p">(</span><span class="p">)</span><span class="p">,</span> <span class="n">lang</span><span class="p">,</span> <span class="n">plugin</span><span class="o">.</span><span class="n">i18n_domain</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>

    <span class="n">tmpl_context</span><span class="o">.</span><span class="n">language</span> <span class="o">=</span> <span class="n">lang</span>
    <span class="k">return</span> <span class="n">lang</span>

<span class="k">def</span> <span class="nf">_add_extra_translations</span><span class="p">(</span><span class="n">dirname</span><span class="p">,</span> <span class="n">locales</span><span class="p">,</span> <span class="n">domain</span><span class="p">)</span><span class="p">:</span>
    <span class="n">translator</span> <span class="o">=</span> <span class="n">Translations</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">dirname</span><span class="o">=</span><span class="n">dirname</span><span class="p">,</span> <span class="n">locales</span><span class="o">=</span><span class="n">locales</span><span class="p">,</span>
                                   <span class="n">domain</span><span class="o">=</span><span class="n">domain</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">pylons</span><span class="o">.</span><span class="n">translator</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">translator</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">AttributeError</span><span class="p">:</span>
        <span class="c1"># this occurs when an extension has &#39;en&#39; translations that</span>
        <span class="c1"># replace the default strings. As set_lang has not been run,</span>
        <span class="c1"># pylons.translation is the NullTranslation, so we have to</span>
        <span class="c1"># replace the StackedObjectProxy ourselves manually.</span>
        <span class="n">environ</span> <span class="o">=</span> <span class="n">pylons</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">environ</span>
        <span class="n">environ</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.pylons</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">translator</span> <span class="o">=</span> <span class="n">translator</span>
        <span class="k">if</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">paste.registry</span><span class="s1">&#39;</span> <span class="ow">in</span> <span class="n">environ</span><span class="p">:</span>
            <span class="n">environ</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">paste.registry</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">pylons</span><span class="o">.</span><span class="n">translator</span><span class="p">,</span> <span class="n">translator</span><span class="p">)</span>
</code></pre></div><p>So simple! When ckan makes a call to <code>set_lang</code>, we pass in the babel <code>Translation</code> class in <code>_set_lang</code>, then when languages are changed in <code>handle_request</code>, we merge all the relevant translations from plugins implementing ITranslation.</p>
<p>There is an edge case for the <code>'en'</code> language. The translation class won't exist yet and pylons will set the <code>NullTranslation</code> class, but we want to allow <code>'en'</code> translations in extensions, this allows users to rename &lsquo;Organizations&rsquo; to whatever they like in their custom instance without changing all the templates!</p>
<p>We do not have worry about permissions of merging files on the server, or making the user provide an extra command. All that is required is for plugin writers to add translations to their extensions and implement <code>ITranslation</code>, making the lives of our users simpler.</p>
<p>In the future, it will be worth exploring allowing extensions to specify strings that they do <em>not</em> want to overwrite in core ckan translations, this will probably be have to be handled in extensions themselves.</p>
<p>Hooray for kwargs and the forward thinking of the original author in the pylons to allow this to happen.</p>
]]></content>
		</item>
		
		<item>
			<title>An Evening With Assembly</title>
			<link>https://the.chuntering.dev/posts/an-evening-with-assembly/</link>
			<pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/an-evening-with-assembly/</guid>
			<description>Back when I was young child, my brothers and I used to play a game called Moonstone. So it was with a bit of nostalgic glee that I went about spending a few hours or so in evening poking around the innards of the game. I wish I had bothered to take a look at the time, as I managed to remove the unbelievably long, unskippable intro that the game has, which would of saved my brothers and I a few hours of pain, enduring the intro whilst waiting for the game to start.</description>
			<content type="html"><![CDATA[<p>Back when I was young child, my brothers and I used to play a game called <a href="https://en.wikipedia.org/wiki/Moonstone:_A_Hard_Days_Knight">Moonstone</a>. So it was with a bit of nostalgic glee that I went about spending a few hours or so in evening poking around the innards of the game. I wish I had bothered to take a look at the time, as I managed to remove the <a href="https://www.youtube.com/watch?v=n0rrm5RXHyI">unbelievably long, unskippable intro</a> that the game has, which would of saved my brothers and I a few hours of pain, enduring the intro whilst waiting for the game to start.</p>
<p>You can find the game itself on various abandonware sites and it runs fine in DOSBox. The game comes with three executables, MS.EXE (the executable to play the game), INTR.EXE (the executable that runs the intro sequence) and MAIN.EXE (the main game itself). DOSBox has a <a href="http://www.vogons.org/viewtopic.php?t=7323">debugger build</a> that allows you to examine memory, step through execution, set breakpoints and more. There's a <a href="http://www.vogons.org/viewtopic.php?t=3944">guide</a> to help you along.</p>
<p>The freeware version of IDA, thankfully supports dos exes, so I could open up all three to have a poke around.</p>
<figure>
    <img src="/ida.png"/> <figcaption>
            <h4>MS.EXE in IDA</h4>
        </figcaption>
</figure>

<p>IDA will attempt to identify all the subroutines and possible strings in the exe. Armed with this and the DOSBox debugger, I went through the assembly and spent the next few hours figuring out and labelling all the subroutines, which you should be able to see a few of in the &ldquo;Names&rdquo; list in the screenshot. It was once everything was labelled and much easier to read that it occurred to me that it would be a good idea to get rid of the intro.</p>
<p>For the most part, MS.EXE will do a bit of checking to see if there is enough memory, checking the dos version is compatible and setting up the graphics to <a href="https://en.wikipedia.org/wiki/Mode_13h">mode 13h</a>. After this it'll launch INTR.EXE followed by MAIN.EXE, hopefully you can see this in the screen shot, for example, <code>runIntroAndMain</code> will load <code>0x00be</code> into the dx register before calling <code>executeBinary</code>. You'll notice that <code>0x0be</code> corresponds to the &ldquo;MAIN.EXE&rdquo; string in the strings window. Also notice that in <code>runIntroAndMain</code>, it'll load <code>0x00b5</code> (the INTR.EXE) string, followed by a series of nop instructions. This is where I had replaced the call to <code>executeBinary</code> with a <a href="https://en.wikipedia.org/wiki/NOP_slide">nop slide</a>, thus saving my future self the pain of the intro ever again.</p>
<p>I took a look at INTR.EXE, just out of interest and IDA gave me a warning that it might be packed. For my purposes, I'm not interested in the figuring out how to decompress the data myself, but in the hexedit view there were a couple of strings that might indicate how it had been compressed. With a bit of searching, the &ldquo;Packed file is corrupt&rdquo; message, led me to this page informing me it had been packed with EXEPACK. A bit more searching led me to an old UNPACK.EXE that would unpack the fille, I ran this in DOSBox on INTR.EXE and could now analyze it in IDA. I really didn't want to do any unnecessary work if I didn't have to. After, firing up the modified MS.EXE to make sure it worked, I had a quick play for a bit of nostalgia (I think I got more satisfaction from getting rid of the intro than playing the game) before deciding to call it a day and go for some tea.</p>
<p>Next time I take a look at this, I'll take a deeper look at MAIN.EXE and perhaps examine the other file formats.</p>
]]></content>
		</item>
		
		<item>
			<title>Randomising Traitor Numbers in Trouble in Terrorist Town</title>
			<link>https://the.chuntering.dev/posts/random-traitor-numbers-in-trouble-in-terrorist-town/</link>
			<pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/random-traitor-numbers-in-trouble-in-terrorist-town/</guid>
			<description>A while back a group of friends and I went through a spate of playing TTT(Trouble in Terrorist Town), to the point where we ended up playing during that Christmas day post dinner lull.
For me, TTT scratches the traitor game mechanic that you can find in board games like The Resistance, Battlestar Galactica and Shadows Over Camelot which you don&#39;t really get in any other computer game. Unlike these games, the number of traitors is rigidly defined by the total number of players by a formula.</description>
			<content type="html"><![CDATA[<p>A while back a group of friends and I went through a spate of playing TTT(Trouble in Terrorist Town), to the point where we ended up playing during that Christmas day post dinner lull.</p>
<p>For me, TTT scratches the traitor game mechanic that you can find in board games like The Resistance, Battlestar Galactica and Shadows Over Camelot which you don't really get in any other computer game. Unlike these games, the number of traitors is rigidly defined by the total number of players by a formula.</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="kr">function</span> <span class="nf">GetTraitorCount</span><span class="p">(</span><span class="n">ply_count</span><span class="p">)</span>
   <span class="c1">-- get number of traitors: pct of players rounded down</span>
   <span class="kd">local</span> <span class="n">traitor_count</span> <span class="o">=</span> <span class="n">math.floor</span><span class="p">(</span><span class="n">ply_count</span> <span class="o">*</span> <span class="n">GetConVar</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">ttt_traitor_pct</span><span class="s2">&#34;</span><span class="p">)</span><span class="p">:</span><span class="n">GetFloat</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
   <span class="c1">-- make sure there is at least 1 traitor</span>
   <span class="n">traitor_count</span> <span class="o">=</span> <span class="n">math.Clamp</span><span class="p">(</span><span class="n">traitor_count</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">GetConVar</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">ttt_traitor_max</span><span class="s2">&#34;</span><span class="p">)</span><span class="p">:</span><span class="n">GetInt</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>

   <span class="kr">return</span> <span class="n">traitor_count</span>
<span class="kr">end</span>
</code></pre></div><p>This means that for a given number of players, the number of traitors/innocents is the same each round. This is probably ok for the public servers, but if you're playing within a small set of friends, knowing that there is two traitors every round gets stale quite quickly. So I ended up quickly writing some (bad) code that adds a second variable <code>ttt_traitor_pct_max</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="n">CreateConVar</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">ttt_traitor_pct_max</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;</span><span class="s2">0.5</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="kd">local</span> <span class="kr">function</span> <span class="nf">GetTraitorCount</span><span class="p">(</span><span class="n">ply_count</span><span class="p">)</span>
    <span class="c1">-- get the difference between ttt_traitor_pct and traitor_pct_max as a positive real number</span>
    <span class="kd">local</span> <span class="n">traitor_pct_range</span> <span class="o">=</span> <span class="n">math.abs</span><span class="p">(</span><span class="p">(</span><span class="n">GetConVar</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">ttt_traitor_pct_max</span><span class="s2">&#34;</span><span class="p">)</span><span class="p">:</span><span class="n">GetFloat</span><span class="p">(</span><span class="p">)</span> <span class="o">-</span> <span class="n">GetConVar</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">ttt_traitor_pct</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">:</span><span class="n">GetFloat</span><span class="p">(</span><span class="p">)</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
    <span class="c1">-- choose a random value in the traitor percentage range</span>
    <span class="kd">local</span> <span class="n">traitor_random</span> <span class="o">=</span> <span class="p">(</span><span class="n">math.random</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">traitor_pct_range</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span>
    <span class="c1">-- get number of traitors: pct of players rounded down (with our additional random traitors)</span>
    <span class="kd">local</span> <span class="n">traitor_count</span> <span class="o">=</span> <span class="n">math.floor</span><span class="p">(</span><span class="n">ply_count</span> <span class="o">*</span> <span class="p">(</span><span class="n">GetConVar</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">ttt_traitor_pct</span><span class="s2">&#34;</span><span class="p">)</span><span class="p">:</span><span class="n">GetFloat</span><span class="p">(</span><span class="p">)</span> <span class="o">+</span> <span class="n">traitor_random</span><span class="p">)</span><span class="p">)</span>
    <span class="c1">-- make sure there is at least 1 traitor</span>
    <span class="n">traitor_count</span> <span class="o">=</span> <span class="n">math.Clamp</span><span class="p">(</span><span class="n">traitor_count</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">GetConVar</span><span class="p">(</span><span class="s2">&#34;</span><span class="s2">ttt_traitor_max</span><span class="s2">&#34;</span><span class="p">)</span><span class="p">:</span><span class="n">GetInt</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>
    <span class="kr">return</span> <span class="n">traitor_count</span>
<span class="kr">end</span>
</code></pre></div><p>The number of traitors is then a random percentage between 20 percent and 50 percent of the number of players. This leaves you guessing about the number of traitors every round. If you set it high enough you can have rounds where there is only one innocent and if all the traitors play along, you can end up stringing along the one innocent for as long as possible.</p>
<p>This could probably be improved by having the percentage of traitors function to be heavily right skew instead of being totally random between the two percentages as in above code snippet, thus making a large number of traitors less likely so you end up with generally one less or one more traitor every round with only the occasional large percentage of traitors. This is the main reason I haven't opened a pull request with this change to the garry's mod repo</p>
<p>I do think this will probably only work amongst a group of friends that you know. If you are doing that however, you'll probably want to turn on the <a href="http://ttt.badking.net/config-and-commands/convars#TOC-Karma">karma system</a>and turn off auto kicking and banning (they're you're friends after all). With no kicking/banning you'll need to give people an incentive to not kill people at random. Generally I do this by turning on the strict karma system(<code>ttt_karma_strict</code>) and upping the amount of karma damage each kill does(<code>ttt_karma_kill_penalty</code>). This means that people who regularly team kill end up doing very little damage until their karma recovers and end up dying in a straight up shoot out, even if they shoot first.</p>
<p>I keep the (vaguely up to date) version of init.lua with these changes at here <a href="https://gist.github.com/joetsoi/7266280">https://gist.github.com/joetsoi/7266280</a>
edit: I've now have a fork which I've applied these changes to <a href="https://github.com/joetsoi/garrysmod">https://github.com/joetsoi/garrysmod</a>.</p>
<p>Happy traitoring!</p>
]]></content>
		</item>
		
		<item>
			<title>Digging into python memory issues in ckan with heapy</title>
			<link>https://the.chuntering.dev/posts/debugging-python-ckan-memory-issues/</link>
			<pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/debugging-python-ckan-memory-issues/</guid>
			<description>So we had a report about a memory leak when using the ckan datastore extension, where large queries to the datastore would leak large amounts of memory per request. It wasn&#39;t simple to get to the bottom of it, at first I couldn&#39;t recreate it the leak at all. The test data I was using was the STAR experiment csv files, which I found when I googled &amp;lsquo;Large example csv files&amp;rsquo;.</description>
			<content type="html"><![CDATA[<p>So we had a report about a memory leak when using the ckan datastore extension, where large queries to the datastore would leak large amounts of memory per request. It wasn't simple to get to the bottom of it, at first I couldn't recreate it the leak at all. The test data I was using was the <a href="https://sdm.lbl.gov/fastbit/data/samples.html">STAR experiment</a> csv files, which I found when I googled &lsquo;Large example csv files&rsquo;. The reporter Alice Heaton, had kindly written a script that would recreate the leak. Even with this, I could not recreate the problem, until I upped the number of rows fetched by a factor of ten. I suspect that Alice has more data per column with perhaps large text fields instead of the mainly numeric data of the STAR experiment data I was using.</p>
<p>Once I could reliably recreate the problem, I ended up poking around using <a href="http://guppy-pe.sourceforge.net/">heapy</a>, which I've used previously to track down similar problems and inserted some code to setup heapy and an ipdb breakpoint.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">guppy</span> <span class="kn">import</span> <span class="n">hpy</span>
<span class="n">hp</span> <span class="o">=</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span>
<span class="n">heap</span> <span class="o">=</span> <span class="n">hp</span><span class="o">.</span><span class="n">heap</span><span class="p">(</span><span class="p">)</span>
<span class="n">strings</span> <span class="o">=</span> <span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="kn">import</span> <span class="nn">ipdb</span><span class="p">;</span> <span class="n">ipdb</span><span class="o">.</span><span class="n">set_trace</span><span class="p">(</span><span class="p">)</span>
</code></pre></div><p>before the <a href="https://github.com/ckan/ckan/blob/release-v2.3/ckan/controllers/api.py#L248">controller returns the result from the api.</a></p>
<p>There are some tutorials hanging around for <a href="http://smira.ru/wp-content/uploads/2011/08/heapy.html">heapy</a>, so I won't repeat the detail, but It looked like the previous responses were hanging around in memory and they were the root cause of the problem.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">heap</span><span class="o">.</span><span class="n">byrcs</span>  
 <span class="n">Partition</span> <span class="n">of</span> <span class="n">a</span> <span class="nb">set</span> <span class="n">of</span> <span class="mi">343689</span> <span class="n">objects</span><span class="o">.</span> <span class="n">Total</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">266893568</span> <span class="nb">bytes</span><span class="o">.</span>  
  <span class="n">Index</span> <span class="n">Count</span>  <span class="o">%</span>   <span class="n">Size</span>  <span class="o">%</span> <span class="n">Cumulative</span> <span class="o">%</span> <span class="n">Referrers</span> <span class="n">by</span> <span class="n">Kind</span> <span class="p">(</span><span class="k">class</span> <span class="err">/</span><span class="err"> </span><span class="nc">dict</span> <span class="n">of</span> <span class="n">class</span><span class="p">)</span>  
    <span class="mi">0</span>   <span class="mi">19</span>  <span class="mi">0</span> <span class="mi">190780624</span> <span class="mi">71</span> <span class="mi">190780624</span> <span class="mi">71</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">pylons</span><span class="o">.</span><span class="n">controllers</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">Response</span>  
    <span class="mi">1</span>   <span class="mi">11</span>  <span class="mi">0</span> <span class="mi">21199320</span>  <span class="mi">8</span> <span class="mi">211979944</span> <span class="mi">79</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">pylons</span><span class="o">.</span><span class="n">controllers</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">Response</span><span class="p">,</span> <span class="nb">list</span>  
    <span class="mi">2</span> <span class="mi">107194</span> <span class="mi">31</span> <span class="mi">10007816</span>  <span class="mi">4</span> <span class="mi">221987760</span> <span class="mi">83</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span>  
    <span class="mi">3</span> <span class="mi">41823</span> <span class="mi">12</span> <span class="mi">4018400</span>  <span class="mi">2</span> <span class="mi">226006160</span> <span class="mi">85</span> <span class="nb">tuple</span>  
    <span class="mi">4</span> <span class="mi">24904</span>  <span class="mi">7</span> <span class="mi">3071408</span>  <span class="mi">1</span> <span class="mi">229077568</span> <span class="mi">86</span> <span class="n">function</span>  
    <span class="mi">5</span>  <span class="mi">9287</span>  <span class="mi">3</span> <span class="mi">2350432</span>  <span class="mi">1</span> <span class="mi">231428000</span> <span class="mi">87</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">module</span>  
    <span class="mi">6</span>  <span class="mi">6440</span>  <span class="mi">2</span> <span class="mi">2324560</span>  <span class="mi">1</span> <span class="mi">233752560</span> <span class="mi">88</span> <span class="n">function</span><span class="p">,</span> <span class="nb">tuple</span>  
    <span class="mi">7</span>  <span class="mi">7144</span>  <span class="mi">2</span> <span class="mi">2229040</span>  <span class="mi">1</span> <span class="mi">235981600</span> <span class="mi">88</span> <span class="nb">type</span>  
    <span class="mi">8</span> <span class="mi">15536</span>  <span class="mi">5</span> <span class="mi">1949840</span>  <span class="mi">1</span> <span class="mi">237931440</span> <span class="mi">89</span> <span class="nb">dict</span> <span class="n">of</span> <span class="nb">type</span>  
    <span class="mi">9</span> <span class="mi">19440</span>  <span class="mi">6</span> <span class="mi">1858816</span>  <span class="mi">1</span> <span class="mi">239790256</span> <span class="mi">90</span> <span class="nb">dict</span> <span class="p">(</span><span class="n">no</span> <span class="n">owner</span><span class="p">)</span>  
 <span class="n">Partition</span> <span class="n">of</span> <span class="n">a</span> <span class="nb">set</span> <span class="n">of</span> <span class="mi">343689</span> <span class="n">objects</span><span class="o">.</span> <span class="n">Total</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">266892800</span> <span class="nb">bytes</span><span class="o">.</span>  
  <span class="n">Index</span> <span class="n">Count</span>  <span class="o">%</span>   <span class="n">Size</span>  <span class="o">%</span> <span class="n">Cumulative</span> <span class="o">%</span> <span class="n">Kind</span> <span class="p">(</span><span class="k">class</span> <span class="err">/</span><span class="err"> </span><span class="nc">dict</span> <span class="n">of</span> <span class="n">class</span><span class="p">)</span>  
    <span class="mi">0</span> <span class="mi">137776</span> <span class="mi">40</span> <span class="mi">225205640</span> <span class="mi">84</span> <span class="mi">225205640</span> <span class="mi">84</span> <span class="nb">str</span>  
    <span class="mi">1</span> <span class="mi">83479</span> <span class="mi">24</span> <span class="mi">7054200</span>  <span class="mi">3</span> <span class="mi">232259840</span> <span class="mi">87</span> <span class="nb">tuple</span>  
    <span class="mi">2</span>  <span class="mi">8486</span>  <span class="mi">2</span> <span class="mi">4350608</span>  <span class="mi">2</span> <span class="mi">236610448</span> <span class="mi">89</span> <span class="nb">dict</span> <span class="p">(</span><span class="n">no</span> <span class="n">owner</span><span class="p">)</span>  
    <span class="mi">3</span> <span class="mi">18988</span>  <span class="mi">6</span> <span class="mi">2430464</span>  <span class="mi">1</span> <span class="mi">239040912</span> <span class="mi">90</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span>  
    <span class="mi">4</span> <span class="mi">19980</span>  <span class="mi">6</span> <span class="mi">2397600</span>  <span class="mi">1</span> <span class="mi">241438512</span> <span class="mi">90</span> <span class="n">function</span>  
    <span class="mi">5</span>  <span class="mi">842</span>  <span class="mi">0</span> <span class="mi">2387696</span>  <span class="mi">1</span> <span class="mi">243826208</span> <span class="mi">91</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">module</span>  
    <span class="mi">6</span>  <span class="mi">2190</span>  <span class="mi">1</span> <span class="mi">1984280</span>  <span class="mi">1</span> <span class="mi">245810488</span> <span class="mi">92</span> <span class="nb">type</span>  
    <span class="mi">7</span>  <span class="mi">2190</span>  <span class="mi">1</span> <span class="mi">1815888</span>  <span class="mi">1</span> <span class="mi">247626376</span> <span class="mi">93</span> <span class="nb">dict</span> <span class="n">of</span> <span class="nb">type</span>  
    <span class="mi">8</span>  <span class="mi">9956</span>  <span class="mi">3</span> <span class="mi">1585184</span>  <span class="mi">1</span> <span class="mi">249211560</span> <span class="mi">93</span> <span class="nb">list</span>  
    <span class="mi">9</span>  <span class="mi">2563</span>  <span class="mi">1</span> <span class="mi">1509984</span>  <span class="mi">1</span> <span class="mi">250721544</span> <span class="mi">94</span> <span class="nb">unicode</span>  
</code></pre></div><p>By inspecting those response strings using byid I could see that specifically the response strings are the problem and from the output below it was clear that the response strings were consuming (in my case) 90 odd percent of the memory that was currently in use by strings. but I didn't really have a good idea as to why they were not getting garbage collected.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">byid</span>  
 <span class="n">Set</span> <span class="n">of</span> <span class="mi">151666</span> <span class="o">&lt;</span><span class="nb">str</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">.</span> <span class="n">Total</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">226687040</span> <span class="nb">bytes</span><span class="o">.</span>  
  <span class="n">Index</span>   <span class="n">Size</span>  <span class="o">%</span>  <span class="n">Cumulative</span> <span class="o">%</span>  <span class="n">Representation</span> <span class="p">(</span><span class="n">limited</span><span class="p">)</span>  
    <span class="mi">0</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">1</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">42392032</span> <span class="mf">18.7</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">2</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">63588048</span> <span class="mf">28.1</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">3</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">84784064</span> <span class="mf">37.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">4</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">105980080</span> <span class="mf">46.8</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">5</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">127176096</span> <span class="mf">56.1</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">6</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">148372112</span> <span class="mf">65.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">7</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">169568128</span> <span class="mf">74.8</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">8</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">190764144</span> <span class="mf">84.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
    <span class="mi">9</span> <span class="mi">21196016</span>  <span class="mf">9.4</span> <span class="mi">211960160</span> <span class="mf">93.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...l</span><span class="s1">&#34;</span><span class="s1">: 2173762}}</span><span class="s1">&#39;</span>  
</code></pre></div><p>I then tried to find what was referencing the strings, perhaps we were holding an extra reference to the request object some where in ckan. Below is the shortest paths of references that heapy can find for the above strings</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">pprint</span><span class="p">(</span><span class="p">[</span><span class="n">strings</span><span class="o">.</span><span class="n">byid</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">.</span><span class="n">shpaths</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span><span class="p">]</span><span class="p">)</span>  
 <span class="p">[</span> <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x4e56250</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x4e56e50</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x4e565f0</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x4ce2430</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x5433ab0</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">t139785342744320_c_traceobj</span><span class="o">.</span><span class="vm">__self__</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">curframe</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">f_locals</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">result</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  
  <span class="mi">1</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">t139785342744320_c_traceobj</span><span class="o">.</span><span class="vm">__self__</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">curframe_locals</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">result</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  
  <span class="mi">2</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">t139785342744320_c_traceobj</span><span class="o">.</span><span class="n">im_self</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">curframe</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">f_locals</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">result</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  
  <span class="mi">3</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">t139785342744320_c_traceobj</span><span class="o">.</span><span class="n">im_self</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">curframe_locals</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">result</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x55288f0</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x4ce28d0</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x4ce21f0</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">hpy</span><span class="p">(</span><span class="p">)</span><span class="o">.</span><span class="n">Root</span><span class="o">.</span><span class="n">i0_modules</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">routes</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_RequestConfig__shared_state</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="err">?</span><span class="err">?</span><span class="p">[</span><span class="o">&lt;</span><span class="n">weakref</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">x54339b0</span><span class="o">&gt;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">environ</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">pylons.controller</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_py_object</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">response</span><span class="s1">&#39;</span><span class="p">]</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">_body</span><span class="s1">&#39;</span><span class="p">]</span>  
</code></pre></div><p>So the <code>&quot;_RequestConfig__shared_state'].??[ &lt; weakref...x4e56250&gt;&quot;</code> in suggested that these objects should of been cleaned up once there was no longer a reference to them, a manual <code>gc.collect()</code> didn't seem to do anything and inspecting the <code>RequestConfig</code> <code>shared_state</code> showed it to be a <code>thread.local</code> object.</p>
<p>Using <code>.rp</code> shows a tree of references, so in this case, the str is contained in a dict of <code>pylons.controllers.util.Response</code> and that's contained in 3, dict of <code>pylons.util.PylonsContext</code> and so on and so forth</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="o">.</span><span class="o">.</span><span class="o">.</span>  
 <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">.</span><span class="n">byid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">rp</span>  
 <span class="n">Reference</span> <span class="n">Pattern</span> <span class="n">by</span> <span class="o">&lt;</span><span class="p">[</span><span class="nb">dict</span> <span class="n">of</span><span class="p">]</span> <span class="n">class</span><span class="o">&gt;</span><span class="o">.</span>  
  <span class="mi">0</span><span class="p">:</span> <span class="n">_</span> <span class="o">-</span><span class="o">-</span><span class="o">-</span> <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="o">&lt;</span><span class="nb">id</span> <span class="mh">0x7f21a9792010</span><span class="o">&gt;</span><span class="p">:</span> <span class="mh">0x7f21a9792010</span>  
  <span class="mi">1</span><span class="p">:</span> <span class="n">a</span>   <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">pylons</span><span class="o">.</span><span class="n">controllers</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">Response</span><span class="p">:</span> <span class="mh">0x7f224a002550</span>  
  <span class="mi">2</span><span class="p">:</span> <span class="n">aa</span> <span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span> <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="n">pylons</span><span class="o">.</span><span class="n">controllers</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">Response</span><span class="p">:</span> <span class="mh">0x7f224a002550</span>  
  <span class="mi">3</span><span class="p">:</span> <span class="n">a3</span>    <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">pylons</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">PylonsContext</span><span class="p">:</span> <span class="mh">0x7f224a002790</span>  
  <span class="mi">4</span><span class="p">:</span> <span class="n">a4</span> <span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span> <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="n">pylons</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">PylonsContext</span><span class="p">:</span> <span class="mh">0x7f224a002790</span>  
  <span class="mi">5</span><span class="p">:</span> <span class="n">a5</span>     <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">pylons</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">AttribSafeContextObj</span><span class="p">:</span> <span class="mh">0x7f224a002ad0</span>  
  <span class="mi">6</span><span class="p">:</span> <span class="n">a6</span> <span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span> <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="n">pylons</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">AttribSafeContextObj</span><span class="p">:</span> <span class="mh">0x7f224a002ad0</span>  
  <span class="mi">7</span><span class="p">:</span> <span class="n">a7</span>      <span class="p">[</span><span class="o">^</span> <span class="mi">3</span><span class="p">]</span> <span class="mi">1</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">pylons</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">PylonsContext</span><span class="p">:</span> <span class="mh">0x7f224a002790</span>  
  <span class="mi">8</span><span class="p">:</span> <span class="n">a4b</span> <span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span> <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="nb">dict</span> <span class="n">of</span> <span class="n">ckan</span><span class="o">.</span><span class="n">controllers</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">ApiController</span><span class="p">:</span> <span class="mh">0x7f224a002c10</span>  
  <span class="mi">9</span><span class="p">:</span> <span class="n">a4ba</span>    <span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="mi">1</span> <span class="n">ckan</span><span class="o">.</span><span class="n">controllers</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">ApiController</span><span class="p">:</span> <span class="mh">0x7f224a002c10</span>  
 <span class="o">&lt;</span><span class="n">Type</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">_.more</span><span class="s1">&#39;</span> <span class="k">for</span> <span class="n">more</span><span class="o">.</span><span class="o">&gt;</span>  
 <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">.</span><span class="n">byid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">rp</span><span class="o">.</span><span class="n">more</span>  
 <span class="mi">10</span><span class="p">:</span> <span class="n">a4baa</span> <span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span> <span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="mi">1</span> <span class="nb">dict</span> <span class="p">(</span><span class="n">no</span> <span class="n">owner</span><span class="p">)</span><span class="p">:</span> <span class="mh">0x7f222405ef30</span><span class="o">*</span><span class="mi">50</span>  
 <span class="mi">11</span><span class="p">:</span> <span class="n">a4bab</span>    <span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="mi">1</span> <span class="n">types</span><span class="o">.</span><span class="n">MethodType</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">ckan</span><span class="o">.</span><span class="n">controllers</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">ApiController</span> <span class="o">.</span><span class="o">.</span><span class="o">.</span>  
</code></pre></div><p>At this point, I was moaning about my lack of progress with this problem on #ckan on freenode
So I wanted to see if what we have in memory is exactly the responses that we requested (or was it copying one request over and over? etc)
I ended up tweaking the script a bit and removing the total from the result dict returned by <code>datastore_search</code></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="kn">import</span> <span class="nn">json</span>  
 <span class="kn">import</span> <span class="nn">urllib</span>  
 <span class="kn">import</span> <span class="nn">urllib2</span>  
 <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>  
 <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>  
   <span class="n">request_params</span> <span class="o">=</span> <span class="p">{</span>  
     <span class="sa"></span><span class="s1">&#39;</span><span class="s1">resource_id</span><span class="s1">&#39;</span><span class="p">:</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">blah</span><span class="s1">&#39;</span><span class="p">,</span>  
     <span class="sa"></span><span class="s1">&#39;</span><span class="s1">offset</span><span class="s1">&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>  
     <span class="sa"></span><span class="s1">&#39;</span><span class="s1">limit</span><span class="s1">&#39;</span><span class="p">:</span> <span class="mi">100000</span> <span class="o">+</span> <span class="n">i</span>  
   <span class="p">}</span>  
   <span class="n">request</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">http://localhost:5000/api/action/datastore_search</span><span class="s1">&#39;</span><span class="p">)</span>  
   <span class="n">response</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">request_params</span><span class="p">)</span><span class="p">)</span><span class="p">)</span>  
   <span class="nb">str</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="p">)</span>  
   <span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>  
   <span class="k">print</span> <span class="nb">str</span><span class="p">[</span><span class="o">-</span><span class="mi">100</span><span class="p">:</span><span class="p">]</span>  
   <span class="n">response</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="p">)</span>  
   <span class="n">i</span> <span class="o">+</span><span class="o">=</span> <span class="mi">1</span> 
</code></pre></div><p>Not exactly the best code I've ever written, but it did mean that when we inspected using <code>.byid</code>, the output would look something like</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">.</span><span class="n">byid</span>  
 <span class="n">Set</span> <span class="n">of</span> <span class="mi">137776</span> <span class="o">&lt;</span><span class="nb">str</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">.</span> <span class="n">Total</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">225205640</span> <span class="nb">bytes</span><span class="o">.</span>  
  <span class="n">Index</span>   <span class="n">Size</span>  <span class="o">%</span>  <span class="n">Cumulative</span> <span class="o">%</span>  <span class="n">Representation</span> <span class="p">(</span><span class="n">limited</span><span class="p">)</span>  
    <span class="mi">0</span> <span class="mi">21198840</span>  <span class="mf">9.4</span> <span class="mi">21198840</span>  <span class="mf">9.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100013}}</span><span class="s1">&#39;</span>  
    <span class="mi">1</span> <span class="mi">21198632</span>  <span class="mf">9.4</span> <span class="mi">42397472</span> <span class="mf">18.8</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100012}}</span><span class="s1">&#39;</span>  
    <span class="mi">2</span> <span class="mi">21198424</span>  <span class="mf">9.4</span> <span class="mi">63595896</span> <span class="mf">28.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100011}}</span><span class="s1">&#39;</span>  
    <span class="mi">3</span> <span class="mi">21198200</span>  <span class="mf">9.4</span> <span class="mi">84794096</span> <span class="mf">37.7</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100010}}</span><span class="s1">&#39;</span>  
    <span class="mi">4</span> <span class="mi">21197976</span>  <span class="mf">9.4</span> <span class="mi">105992072</span> <span class="mf">47.1</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100009}}</span><span class="s1">&#39;</span>  
    <span class="mi">5</span> <span class="mi">21197768</span>  <span class="mf">9.4</span> <span class="mi">127189840</span> <span class="mf">56.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100008}}</span><span class="s1">&#39;</span>  
    <span class="mi">6</span> <span class="mi">21197552</span>  <span class="mf">9.4</span> <span class="mi">148387392</span> <span class="mf">65.9</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100007}}</span><span class="s1">&#39;</span>  
    <span class="mi">7</span> <span class="mi">21197336</span>  <span class="mf">9.4</span> <span class="mi">169584728</span> <span class="mf">75.3</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100006}}</span><span class="s1">&#39;</span>  
    <span class="mi">8</span> <span class="mi">21197120</span>  <span class="mf">9.4</span> <span class="mi">190781848</span> <span class="mf">84.7</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100005}}</span><span class="s1">&#39;</span>  
    <span class="mi">9</span> <span class="mi">21196896</span>  <span class="mf">9.4</span> <span class="mi">211978744</span> <span class="mf">94.1</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100004}}</span><span class="s1">&#39;</span>  
 <span class="o">&lt;</span><span class="mi">137766</span> <span class="n">more</span> <span class="n">rows</span><span class="o">.</span> <span class="n">Type</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">_.more</span><span class="s1">&#39;</span> <span class="n">to</span> <span class="n">view</span><span class="o">.</span><span class="o">&gt;</span>  
</code></pre></div><p>This way, I could directly see which of the requests made are in memory, it was clear that we were dealing with the old requests being kept around in memory. I also took a look at the next couple of strings hanging around.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">.</span><span class="n">byid</span><span class="o">.</span><span class="n">more</span>  
  <span class="n">Index</span>   <span class="n">Size</span>  <span class="o">%</span>  <span class="n">Cumulative</span> <span class="o">%</span>  <span class="n">Representation</span> <span class="p">(</span><span class="n">limited</span><span class="p">)</span>  
   <span class="mi">10</span>  <span class="mi">77528</span>  <span class="mf">0.0</span> <span class="mi">212056272</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">============...elease.</span><span class="se">\n</span><span class="se">\n</span><span class="se">\n</span><span class="s1">&#39;</span>  
   <span class="mi">11</span>  <span class="mi">30712</span>  <span class="mf">0.0</span> <span class="mi">212086984</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Provide a re...n</span><span class="se">\n</span><span class="se">\n</span><span class="s1">    </span><span class="s1">&#39;</span>  
   <span class="mi">12</span>  <span class="mi">22352</span>  <span class="mf">0.0</span> <span class="mi">212109336</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">(?&lt;=</span><span class="se">\\</span><span class="s1">()(</span><span class="se">\\</span><span class="s1">*...ng |zero</span><span class="se">\\</span><span class="s1">? )</span><span class="s1">&#39;</span>  
   <span class="mi">13</span>  <span class="mi">18016</span>  <span class="mf">0.0</span> <span class="mi">212127352</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Return a new....</span><span class="se">\n</span><span class="se">\n</span><span class="s1">    </span><span class="s1">&#39;</span>  
   <span class="mi">14</span>  <span class="mi">13656</span>  <span class="mf">0.0</span> <span class="mi">212141008</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">.. dialect...stgreSQL.</span><span class="se">\n</span><span class="se">\n</span><span class="s1">&#39;</span>  
   <span class="mi">15</span>  <span class="mi">12480</span>  <span class="mf">0.0</span> <span class="mi">212153488</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">subprocess -...cess.Popen.</span><span class="se">\n</span><span class="s1">&#39;</span>  
   <span class="mi">16</span>  <span class="mi">12088</span>  <span class="mf">0.0</span> <span class="mi">212165576</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s2">&#34;</span><span class="s2">Create a new...k</span><span class="s2">&#39;</span><span class="s2">``.</span><span class="se">\n</span><span class="se">\n</span><span class="s2">  </span><span class="s2">&#34;</span>  
   <span class="mi">17</span>  <span class="mi">11088</span>  <span class="mf">0.0</span> <span class="mi">212176664</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Create a SQL....</span><span class="se">\n</span><span class="se">\n</span><span class="s1">    </span><span class="s1">&#39;</span>  
   <span class="mi">18</span>  <span class="mi">10904</span>  <span class="mf">0.0</span> <span class="mi">212187568</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">    Co....</span><span class="se">\n</span><span class="se">\n</span><span class="s1">    </span><span class="s1">&#39;</span>  
   <span class="mi">19</span>  <span class="mi">10504</span>  <span class="mf">0.0</span> <span class="mi">212198072</span> <span class="mf">94.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">  Format...output.</span><span class="se">\n</span><span class="s1">  </span><span class="s1">&#39;</span>  
 <span class="o">&lt;</span><span class="mi">137756</span> <span class="n">more</span> <span class="n">rows</span><span class="o">.</span> <span class="n">Type</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">_.more</span><span class="s1">&#39;</span> <span class="n">to</span> <span class="n">view</span><span class="o">.</span><span class="o">&gt;</span>  
</code></pre></div><p>At this point, the first requests we made no longer appear in memory, the requests for 100000-100003 don't appear to be in memory.</p>
<p>So by doing some stepping through each request and stopping before the controller returned the response each time, we can see that it maintains a maximum of 10 response strings in memory and the older requests get shuffled off</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">c</span>  
 <span class="mi">2015</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">15</span> <span class="mi">17</span><span class="p">:</span><span class="mi">54</span><span class="p">:</span><span class="mi">57</span><span class="p">,</span><span class="mi">892</span> <span class="n">INFO</span> <span class="p">[</span><span class="n">ckan</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">base</span><span class="p">]</span> <span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">action</span><span class="o">/</span><span class="n">datastore_search</span> <span class="n">render</span> <span class="n">time</span> <span class="mf">33.155</span> <span class="n">seconds</span>  
 <span class="o">&gt;</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">joe</span><span class="o">/</span><span class="n">projects</span><span class="o">/</span><span class="n">json_datastore</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">ckan</span><span class="o">/</span><span class="n">ckan</span><span class="o">/</span><span class="n">controllers</span><span class="o">/</span><span class="n">api</span><span class="o">.</span><span class="n">py</span><span class="p">(</span><span class="mi">82</span><span class="p">)</span><span class="fm">__call__</span><span class="p">(</span><span class="p">)</span>  
    <span class="mi">81</span>       <span class="kn">import</span> <span class="nn">ipdb</span><span class="p">;</span> <span class="n">ipdb</span><span class="o">.</span><span class="n">set_trace</span><span class="p">(</span><span class="p">)</span>  
 <span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">&gt;</span> <span class="mi">82</span>     <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">mem {0}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="o">-</span><span class="mi">20</span><span class="p">]</span><span class="p">)</span><span class="p">)</span>  
    <span class="mi">83</span>   
 <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">.</span><span class="n">byid</span>  
 <span class="n">Set</span> <span class="n">of</span> <span class="mi">151739</span> <span class="o">&lt;</span><span class="nb">str</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">.</span> <span class="n">Total</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">226701936</span> <span class="nb">bytes</span><span class="o">.</span>  
  <span class="n">Index</span>   <span class="n">Size</span>  <span class="o">%</span>  <span class="n">Cumulative</span> <span class="o">%</span>  <span class="n">Representation</span> <span class="p">(</span><span class="n">limited</span><span class="p">)</span>  
    <span class="mi">0</span> <span class="mi">21199056</span>  <span class="mf">9.4</span> <span class="mi">21199056</span>  <span class="mf">9.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100014}}</span><span class="s1">&#39;</span>  
    <span class="mi">1</span> <span class="mi">21198840</span>  <span class="mf">9.4</span> <span class="mi">42397896</span> <span class="mf">18.7</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100013}}</span><span class="s1">&#39;</span>  
    <span class="mi">2</span> <span class="mi">21198632</span>  <span class="mf">9.4</span> <span class="mi">63596528</span> <span class="mf">28.1</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100012}}</span><span class="s1">&#39;</span>  
    <span class="mi">3</span> <span class="mi">21198424</span>  <span class="mf">9.4</span> <span class="mi">84794952</span> <span class="mf">37.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100011}}</span><span class="s1">&#39;</span>  
    <span class="mi">4</span> <span class="mi">21198200</span>  <span class="mf">9.4</span> <span class="mi">105993152</span> <span class="mf">46.8</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100010}}</span><span class="s1">&#39;</span>  
    <span class="mi">5</span> <span class="mi">21197976</span>  <span class="mf">9.4</span> <span class="mi">127191128</span> <span class="mf">56.1</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100009}}</span><span class="s1">&#39;</span>  
    <span class="mi">6</span> <span class="mi">21197768</span>  <span class="mf">9.4</span> <span class="mi">148388896</span> <span class="mf">65.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100008}}</span><span class="s1">&#39;</span>  
    <span class="mi">7</span> <span class="mi">21197552</span>  <span class="mf">9.4</span> <span class="mi">169586448</span> <span class="mf">74.8</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100007}}</span><span class="s1">&#39;</span>  
    <span class="mi">8</span> <span class="mi">21197336</span>  <span class="mf">9.4</span> <span class="mi">190783784</span> <span class="mf">84.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100006}}</span><span class="s1">&#39;</span>  
    <span class="mi">9</span> <span class="mi">21197120</span>  <span class="mf">9.4</span> <span class="mi">211980904</span> <span class="mf">93.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100005}}</span><span class="s1">&#39;</span>  
 <span class="o">&lt;</span><span class="mi">151729</span> <span class="n">more</span> <span class="n">rows</span><span class="o">.</span> <span class="n">Type</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">_.more</span><span class="s1">&#39;</span> <span class="n">to</span> <span class="n">view</span><span class="o">.</span><span class="o">&gt;</span>  
</code></pre></div><p>100004 has been wiped off. At this point after some discussion on irc, we thought it might be the fact that we're in debug mode, and it's just retaining the last 10 responses and their debugging information. but the problem remained when I set &ldquo;debug = false&rdquo; in my ckan development.ini</p>
<p>The thing is ten is far too perfect a number, we humans deal with numbers in batches of ten, if this was a random occurence, it was unlikely that there would just happen to be ten requests hanging around. It was more likely that the ten requests hanging around were the result of some config setting somewhere, where the default was ten.</p>
<p>I pieced together the weakref, thread.local stuff with <a href="http://pythonpaste.org/paste-httpserver-threadpool.html">http://pythonpaste.org/paste-httpserver-threadpool.html</a> and noticed that the <em>default number of threads for the paste http server is 10</em>. I then tested by changing the <code>threadpool_workers=n</code> in my ckan development.ini, and each time it matched the number of strings that showed up in <code>heap[0].byid</code>.</p>
<p>The other thing to notice is that if I made 10 new requests to api endpoints that return a much smaller response</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">Set</span> <span class="n">of</span> <span class="mi">151950</span> <span class="o">&lt;</span><span class="nb">str</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">.</span> <span class="n">Total</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">78397616</span> <span class="nb">bytes</span><span class="o">.</span>  
  <span class="n">Index</span>   <span class="n">Size</span>  <span class="o">%</span>  <span class="n">Cumulative</span> <span class="o">%</span>  <span class="n">Representation</span> <span class="p">(</span><span class="n">limited</span><span class="p">)</span>  
    <span class="mi">0</span> <span class="mi">21199280</span> <span class="mf">27.0</span> <span class="mi">21199280</span> <span class="mf">27.0</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100015}}</span><span class="s1">&#39;</span>  
    <span class="mi">1</span> <span class="mi">21199056</span> <span class="mf">27.0</span> <span class="mi">42398336</span> <span class="mf">54.1</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100014}}</span><span class="s1">&#39;</span>  
    <span class="mi">2</span> <span class="mi">21198840</span> <span class="mf">27.0</span> <span class="mi">63597176</span> <span class="mf">81.1</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...it</span><span class="s1">&#34;</span><span class="s1">: 100013}}</span><span class="s1">&#39;</span>  
    <span class="mi">3</span>  <span class="mi">77528</span>  <span class="mf">0.1</span> <span class="mi">63674704</span> <span class="mf">81.2</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">============...elease.</span><span class="se">\n</span><span class="se">\n</span><span class="se">\n</span><span class="s1">&#39;</span>  
    <span class="mi">4</span>  <span class="mi">30712</span>  <span class="mf">0.0</span> <span class="mi">63705416</span> <span class="mf">81.3</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Provide a re...n</span><span class="se">\n</span><span class="se">\n</span><span class="s1">    </span><span class="s1">&#39;</span>  
    <span class="mi">5</span>  <span class="mi">22352</span>  <span class="mf">0.0</span> <span class="mi">63727768</span> <span class="mf">81.3</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">(?&lt;=</span><span class="se">\\</span><span class="s1">()(</span><span class="se">\\</span><span class="s1">*...ng |zero</span><span class="se">\\</span><span class="s1">? )</span><span class="s1">&#39;</span>  
    <span class="mi">6</span>  <span class="mi">18016</span>  <span class="mf">0.0</span> <span class="mi">63745784</span> <span class="mf">81.3</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Return a new....</span><span class="se">\n</span><span class="se">\n</span><span class="s1">    </span><span class="s1">&#39;</span>  
    <span class="mi">7</span>  <span class="mi">13656</span>  <span class="mf">0.0</span> <span class="mi">63759440</span> <span class="mf">81.3</span> <span class="sa"></span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">.. dialect...stgreSQL.</span><span class="se">\n</span><span class="se">\n</span><span class="s1">&#39;</span>  
    <span class="mi">8</span>  <span class="mi">12480</span>  <span class="mf">0.0</span> <span class="mi">63771920</span> <span class="mf">81.3</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">subprocess -...cess.Popen.</span><span class="se">\n</span><span class="s1">&#39;</span>  
    <span class="mi">9</span>  <span class="mi">12088</span>  <span class="mf">0.0</span> <span class="mi">63784008</span> <span class="mf">81.4</span> <span class="sa"></span><span class="s2">&#34;</span><span class="s2">Create a new...k</span><span class="s2">&#39;</span><span class="s2">``.</span><span class="se">\n</span><span class="se">\n</span><span class="s2">  </span><span class="s2">&#34;</span>  
 <span class="o">&lt;</span><span class="mi">151940</span> <span class="n">more</span> <span class="n">rows</span><span class="o">.</span> <span class="n">Type</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">_.more</span><span class="s1">&#39;</span> <span class="n">to</span> <span class="n">view</span><span class="o">.</span><span class="o">&gt;</span>  
 <span class="n">ipdb</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">.</span><span class="n">byid</span><span class="o">.</span><span class="n">more</span>  
  <span class="n">Index</span>   <span class="n">Size</span>  <span class="o">%</span>  <span class="n">Cumulative</span> <span class="o">%</span>  <span class="n">Representation</span> <span class="p">(</span><span class="n">limited</span><span class="p">)</span>  
   <span class="mi">10</span>  <span class="mi">11088</span>  <span class="mf">0.0</span> <span class="mi">63795096</span> <span class="mf">81.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Create a SQL....</span><span class="se">\n</span><span class="se">\n</span><span class="s1">    </span><span class="s1">&#39;</span>  
   <span class="mi">11</span>  <span class="mi">10904</span>  <span class="mf">0.0</span> <span class="mi">63806000</span> <span class="mf">81.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">    Co....</span><span class="se">\n</span><span class="se">\n</span><span class="s1">    </span><span class="s1">&#39;</span>  
   <span class="mi">12</span>  <span class="mi">10584</span>  <span class="mf">0.0</span> <span class="mi">63816584</span> <span class="mf">81.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...facets</span><span class="s1">&#34;</span><span class="s1">: {}}}</span><span class="s1">&#39;</span>  <span class="p">(</span><span class="n">the</span> <span class="n">smaller</span> <span class="n">api</span> <span class="n">responses</span><span class="p">)</span>  
   <span class="mi">13</span>  <span class="mi">10584</span>  <span class="mf">0.0</span> <span class="mi">63827168</span> <span class="mf">81.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...facets</span><span class="s1">&#34;</span><span class="s1">: {}}}</span><span class="s1">&#39;</span>  
   <span class="mi">14</span>  <span class="mi">10584</span>  <span class="mf">0.0</span> <span class="mi">63837752</span> <span class="mf">81.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...facets</span><span class="s1">&#34;</span><span class="s1">: {}}}</span><span class="s1">&#39;</span>  
   <span class="mi">15</span>  <span class="mi">10584</span>  <span class="mf">0.0</span> <span class="mi">63848336</span> <span class="mf">81.4</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...facets</span><span class="s1">&#34;</span><span class="s1">: {}}}</span><span class="s1">&#39;</span>  
   <span class="mi">16</span>  <span class="mi">10584</span>  <span class="mf">0.0</span> <span class="mi">63858920</span> <span class="mf">81.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...facets</span><span class="s1">&#34;</span><span class="s1">: {}}}</span><span class="s1">&#39;</span>  
   <span class="mi">17</span>  <span class="mi">10584</span>  <span class="mf">0.0</span> <span class="mi">63869504</span> <span class="mf">81.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">{</span><span class="s1">&#34;</span><span class="s1">help</span><span class="s1">&#34;</span><span class="s1">: </span><span class="s1">&#34;</span><span class="s1">ht...facets</span><span class="s1">&#34;</span><span class="s1">: {}}}</span><span class="s1">&#39;</span>  
   <span class="mi">18</span>  <span class="mi">10504</span>  <span class="mf">0.0</span> <span class="mi">63880008</span> <span class="mf">81.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">  Format...output.</span><span class="se">\n</span><span class="s1">  </span><span class="s1">&#39;</span>  
   <span class="mi">19</span>   <span class="mi">9168</span>  <span class="mf">0.0</span> <span class="mi">63889176</span> <span class="mf">81.5</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Represent a ...ents.</span><span class="se">\n</span><span class="se">\n</span><span class="s1">  </span><span class="s1">&#39;</span>  
 <span class="o">&lt;</span><span class="mi">151930</span> <span class="n">more</span> <span class="n">rows</span><span class="o">.</span> <span class="n">Type</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">_.more</span><span class="s1">&#39;</span> <span class="n">to</span> <span class="n">view</span><span class="o">.</span><span class="o">&gt;</span>  
</code></pre></div><p>you'll see the total size has dropped from 226701936 bytes to 78397616 bytes. But the entire time that I had been debugging, I had also been running</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"> $ watch <span class="s2">&#34;cat /proc/`pgrep paster`/status&#34;</span>  
 ...  
 VmPeak: <span class="m">3497708</span> kB  
 VmSize: <span class="m">3497708</span> kB  
 ...  
</code></pre></div><p>Which still reports the memory usage the same as when the larger requests were still in memory. This is apparently just the way python works (see <a href="https://groups.google.com/forum/#!topic/celery-users/jVc3I3kPtlw)">https://groups.google.com/forum/#!topic/celery-users/jVc3I3kPtlw)</a>. If you've just made a response that took up 500mb of memory, it stands to reason that you might have to do the same again quite soon, so python will hang onto the (virtual) memory. But it's not &lsquo;leaked&rsquo;</p>
<p><a href="http://pylons-webframework.readthedocs.org/en/latest/controllers.html#special-methods,">http://pylons-webframework.readthedocs.org/en/latest/controllers.html#special-methods,</a> The next step was to investigate whether it's ok to clear out the string in something like the <strong>after</strong>() method of the controller. I ended up creating some pylons specific cleanup middleware (see <a href="https://github.com/ckan/ckan/pull/2262">https://github.com/ckan/ckan/pull/2262</a>)</p>
<p>Once the response string has been served, this middleware replaces the response string with a dummy one, so the original response can be garbage collected. This was lifted from <a href="https://code.google.com/p/modwsgi/wiki/RegisteringCleanupCode">https://code.google.com/p/modwsgi/wiki/RegisteringCleanupCode</a> This middleware is can be switched on by setting &lsquo;ckan.use_pylons_response_cleanup_middleware = true&rsquo; in your development.ini</p>
<p>So I did a comparison of with and without this enabled. Everyone likes graphs right?</p>
<p><img src="/ckan_memory_usage.png" alt="memory usage"></p>
<p>Notably, the memory usage still grows with this enabled, but is a bit more stable. I also did some examining of the memory and this memory has been returned to python's free lists but has not been released by the python process. see (<a href="http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm)">http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm)</a>. So we'll still use up as much memory as there are threads</p>
<p>So the other way around it is to do something like use gunicorn + gevent, although this isn't a fair direct comparison as this is only using one worker process, but I mainly suggest this as you can set worker processes to restart after serving a maximum number of requests (see <a href="http://docs.gunicorn.org/en/develop/configure.html#max-requests),">http://docs.gunicorn.org/en/develop/configure.html#max-requests),</a> which would release any memory that the process has been allocated but is not using.</p>
<p>Finally it was noted that we probably shouldn't be building up the entire response in memory before returning it this is because we're using json.dumps for the response string. It would be better if we had an iterator of some form to stream the response back.</p>
<p>If you want to help fix it, take a look at  <a href="https://github.com/ckan/ideas-and-roadmap/issues/128">https://github.com/ckan/ideas-and-roadmap/issues/128</a></p>
<p>Next time I look into a python memory issue, I'd like to use meliae (<a href="https://pypi.python.org/pypi/meliae">https://pypi.python.org/pypi/meliae</a>) or some other interesting tools. Anyway that was some fun sleuthing.</p>
<h4 id="heapy-docs">heapy docs</h4>
<ul>
<li><a href="http://guppy-pe.sourceforge.net/heapy-thesis.pdf">http://guppy-pe.sourceforge.net/heapy-thesis.pdf</a></li>
<li><a href="http://smira.ru/wp-content/uploads/2011/08/heapy.html">http://smira.ru/wp-content/uploads/2011/08/heapy.html</a></li>
<li><a href="http://haypo-notes.readthedocs.org/en/latest/heap_fragmentation.html">http://haypo-notes.readthedocs.org/en/latest/heap_fragmentation.html</a></li>
<li><a href="https://chase-seibert.github.io/blog/2013/08/03/diagnosing-memory-leaks-python.html">https://chase-seibert.github.io/blog/2013/08/03/diagnosing-memory-leaks-python.html</a></li>
<li><a href="http://forthescience.org/blog/2014/08/16/python-and-memory-fragmentation/">http://forthescience.org/blog/2014/08/16/python-and-memory-fragmentation/</a></li>
</ul>
<h4 id="weak-references">weak references</h4>
<ul>
<li><a href="https://docs.python.org/2/library/weakref.html">https://docs.python.org/2/library/weakref.html</a></li>
<li><a href="http://pymotw.com/2/weakref/">http://pymotw.com/2/weakref/</a></li>
</ul>
<h4 id="pylons-docs">pylons docs</h4>
<ul>
<li><a href="http://pylons-webframework.readthedocs.org/en/latest/execution.html">http://pylons-webframework.readthedocs.org/en/latest/execution.html</a></li>
<li><a href="http://pythonpaste.org/paste-httpserver-threadpool.html">http://pythonpaste.org/paste-httpserver-threadpool.html</a></li>
</ul>
<p>(This post was constructed from <a href="https://github.com/ckan/ckan/issues/1847,">https://github.com/ckan/ckan/issues/1847,</a> <a href="https://github.com/ckan/ckan/pull/2262">https://github.com/ckan/ckan/pull/2262</a>)</p>
]]></content>
		</item>
		
		<item>
			<title>WTF is this context thing in CKAN?</title>
			<link>https://the.chuntering.dev/posts/wtf-is-this-context-thing-in-ckan/</link>
			<pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/wtf-is-this-context-thing-in-ckan/</guid>
			<description>If you&#39;ve taken a look at the ckan source code, you&#39;ll have come across &amp;lsquo;context&amp;rsquo; as the first parameter in many of the functions. It basically contains all threadlocal information required for a function to execute. It&#39;s taken me far too long to understand why they exist and I currently think contexts in their current state are pointless.
I&#39;m assuming contexts only contain model, session and user. I get why context exists, it basically comes down to whether</description>
			<content type="html"><![CDATA[<p>If you've taken a look at the ckan source code, you'll have come across &lsquo;context&rsquo; as the first parameter in many of the functions. It basically contains all threadlocal information required for a function to execute. It's taken me far too long to understand why they exist and I currently think contexts in their current state are pointless.</p>
<p>I'm assuming contexts only contain model, session and user. I get why context exists, it basically comes down to whether</p>
<ul>
<li>you prefer passing parameters for the request/session/user around into functions, so that the parameters define exactly what the function needs to execute. If we do this though, these are &lsquo;different&rsquo; to other parameters which is why they've been seperated into context/data_dict. Your functions do not have to refer to some magical global object to execute.</li>
<li>Or whether you are happy using threadlocals, so that if your logic function, calls another function that calls another, that calls &hellip;, that calls function <code>f</code>, <code>f</code> can easily get the request/session/user by calling the flask <code>g</code> object/pylons <code>g</code> thing to get the user without having to muddy up all the other previous function callers definitions. Your compromise is that you have a magical &lsquo;global&rsquo; object (say <code>model.Session</code>) but you can access it anywhere in the code safely without thinking about it too much.</li>
</ul>
<p>There is no right answer, the guy who wrote flask wrote this <a href="http://www.memonic.com/user/pneff/folder/python/id/1Wg">a blog post detailing his hate for thread locals</a> before he wrote flask, <a href="http://flask.pocoo.org/docs/0.10/design/#thread-locals">where the decision was made to use them</a>, I know that <a href="https://lists.okfn.org/pipermail/ckan-dev/2011-August/001151.html">David R</a> is not a fan of them</p>
<p>The problem I think we have, is that ckan straddles both sides and we end up with a worse, really confusing, solution. Currently in ckan, we use the <a href="http://docs.sqlalchemy.org/en/rel_0_9/orm/contextual.html#contextual-thread-local-sessions">scoped_session, which is a threadlocal based setup for sqlalchemy</a>, So when you pass <code>ckan.model</code> from your extension into an action function, unless theres is some additional voodoo(possibly vdm, i haven't looked at that code), then <code>ckan.model.Session</code> and <code>context['session']</code> are currently always the same. This is incredibly confusing, especially to new ckan developers.</p>
<p>So if <code>context['session']</code> is the current sqlalchemy session, that we're passing around, then why are we passing <code>context['model']</code> around? Well it's all to do with the model code. Take a look at <code>model/package.py</code> and you'll see it using <code>meta.Session.query</code> all over the shop. For example,</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="c1"># ckan/model/package.py</span>

 <span class="kn">import</span> <span class="nn">meta</span>  
 <span class="k">class</span> <span class="nc">Package</span><span class="p">(</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="p">)</span><span class="p">:</span>  
 <span class="o">.</span><span class="o">.</span><span class="o">.</span>   
   <span class="nd">@classmethod</span>  
   <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="n">reference</span><span class="p">)</span><span class="p">:</span>  
     <span class="sa"></span><span class="s1">&#39;&#39;&#39;</span><span class="s1">Returns a package object referenced by its id or name.</span><span class="s1">&#39;&#39;&#39;</span>  
     <span class="n">query</span> <span class="o">=</span> <span class="n">meta</span><span class="o">.</span><span class="n">Session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="bp">cls</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="bp">cls</span><span class="o">.</span><span class="n">id</span><span class="o">==</span><span class="n">reference</span><span class="p">)</span>  
     <span class="n">pkg</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="p">)</span>  
     <span class="k">if</span> <span class="n">pkg</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>  
       <span class="n">pkg</span> <span class="o">=</span> <span class="bp">cls</span><span class="o">.</span><span class="n">by_name</span><span class="p">(</span><span class="n">reference</span><span class="p">)</span>  
     <span class="k">return</span> <span class="n">pkg</span>  
</code></pre></div><p>In much of the logic layer you'll see that all the action functions begin</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="c1"># ckan/logic/action/get.py</span>

<span class="k">def</span> <span class="nf">package_show</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">data_dict</span><span class="p">)</span><span class="p">:</span>  
   <span class="n">model</span> <span class="o">=</span> <span class="n">context</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">model</span><span class="s1">&#39;</span><span class="p">]</span>  
   <span class="n">session</span> <span class="o">=</span> <span class="n">context</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">session</span><span class="s1">&#39;</span><span class="p">]</span>
   <span class="n">pkg</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">Package</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name_or_id</span><span class="p">)</span>
</code></pre></div><p>If we didn't include this line and imported <code>ckan.model</code> in the logic layer and ran <code>model.Package.get('blah')</code>, we'd be referring to the threadlocal sqlalchemy session(the &ldquo;global&rdquo; one), not the one we passed through <code>context['model']</code>(even if they are they both refer to the same thing)</p>
<p>So to get round this we pass <code>context['model']</code> into the logic functions and generally have a line <code>model = context['model']</code>. This ensures we'll be referring to the session object that we passed in as a parameter through <code>context</code> throughout the code.</p>
<p>So <code>context['model']</code> is a way of avoiding references to the threadlocal/&ldquo;global&rdquo; <code>model.Session</code> object for the model code.</p>
<p>All callees in ckan extensions usually end up constructing a <code>context</code> and passing it in, many of the extensions I've written contain.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="k">def</span> <span class="nf">some_method_in_a_controller</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="p">:</span>  
   <span class="n">some_stuff</span><span class="p">(</span><span class="p">)</span>  
   <span class="o">.</span><span class="o">.</span><span class="o">.</span>  
   <span class="n">context</span> <span class="o">=</span> <span class="p">{</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">model</span><span class="s1">&#39;</span><span class="p">:</span> <span class="n">model</span><span class="p">,</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">session</span><span class="s1">&#39;</span><span class="p">:</span> <span class="n">model</span><span class="o">.</span><span class="n">Session</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">, </span><span class="s1">&#39;</span><span class="n">user</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">: c.user }  </span>
   <span class="n">data_dict</span> <span class="o">=</span> <span class="p">{</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">some</span><span class="s1">&#39;</span><span class="p">:</span> <span class="n">stuff</span> <span class="p">}</span>  
   <span class="n">toolkit</span><span class="o">.</span><span class="n">get_action</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">some_action</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">data_dict</span><span class="p">)</span>  
</code></pre></div><p>In reality it's better to do</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="k">def</span> <span class="nf">some_method_in_a_controller</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="p">:</span>  
   <span class="n">some_stuff</span><span class="p">(</span><span class="p">)</span>  
   <span class="o">.</span><span class="o">.</span><span class="o">.</span>  
   <span class="n">data_dict</span> <span class="o">=</span> <span class="p">{</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">some</span><span class="s1">&#39;</span><span class="p">:</span> <span class="n">stuff</span> <span class="p">}</span>  
   <span class="n">toolkit</span><span class="o">.</span><span class="n">get_action</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">some_action</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">(</span><span class="n">data_dict</span><span class="o">=</span><span class="n">data_dict</span><span class="p">)</span>  
</code></pre></div><p>This is because <code>get_action()</code> will construct a default <code>context</code> for you if you don't specify it. Also because, you as an extension writer, do not care about <code>context</code>. (Also in the future it means we can refactor/remove it more easily without breaking your code!)</p>
<p>Anyway, we've muddied up our code because I never really understood it, but it's how our extensions are written, so everyone copies our code. I personally think it would be better to pass the session to the model code.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="k">class</span> <span class="nc">Package</span><span class="p">(</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="p">)</span><span class="p">:</span>  
 <span class="o">.</span><span class="o">.</span><span class="o">.</span>   
   <span class="nd">@classmethod</span>  
   <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="n">reference</span><span class="p">,</span> <span class="n">session</span><span class="p">)</span><span class="p">:</span>  
     <span class="sa"></span><span class="s1">&#39;&#39;&#39;</span><span class="s1">Returns a package object referenced by its id or name.</span><span class="s1">&#39;&#39;&#39;</span>  
     <span class="n">query</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="bp">cls</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="bp">cls</span><span class="o">.</span><span class="n">id</span><span class="o">==</span><span class="n">reference</span><span class="p">)</span>  
     <span class="n">pkg</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="p">)</span>  
     <span class="k">if</span> <span class="n">pkg</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>  
       <span class="n">pkg</span> <span class="o">=</span> <span class="bp">cls</span><span class="o">.</span><span class="n">by_name</span><span class="p">(</span><span class="n">reference</span><span class="p">)</span>  
     <span class="k">return</span> <span class="n">pkg</span>  
</code></pre></div><p>This way, you would no longer need to pass <code>context['model']</code> because the action functions would end up looking like</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="k">def</span> <span class="nf">package_show</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">data_dict</span><span class="p">)</span><span class="p">:</span>  
   <span class="n">user</span> <span class="o">=</span> <span class="n">context</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">user</span><span class="s1">&#39;</span><span class="p">]</span> <span class="c1"># if i&#39;m using it</span>
   <span class="n">model</span><span class="o">.</span><span class="n">Package</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">blah</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">session</span><span class="o">=</span><span class="n">context</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">session</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span>  
</code></pre></div><p>Wait, wait, or even better</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="k">def</span> <span class="nf">package_show</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">schema</span><span class="p">,</span> <span class="n">dataset_id</span><span class="p">,</span> <span class="n">some_real_parameters_so_I_know_the_parameters_without_looking_at_the_schema</span><span class="p">)</span><span class="p">:</span>  
   <span class="n">model</span><span class="o">.</span><span class="n">Package</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">blah</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">session</span><span class="o">=</span><span class="n">session</span><span class="p">)</span>  
</code></pre></div><p>This would clean up tests as well, the way we supply user into the <code>context</code> is a pain in the backside. When you're writing a test using the factories and you're passing a user in as an argument, but you might have been given a <code>user_dict</code> by another action function in a test, so what do you use? the username or the <code>user_dict</code>? The answer is we have magic which takes a stab at figuring it out so the <code>context['user']</code> is setup properly.</p>
<p>The problem is even with <code>context</code>, we're still using all the pylons <code>g</code>, <code>c</code> and whatever else everywhere anyway. So we have the problem of threadlocal objects everywhere in the code, but we still have to pass our session/user everywhere, (but not the request, we use pylons threadlocal request for that). Hence why I say <code>context</code>s in their current state are pointless.</p>
<p>Additionally, how do we supply a validation schema? Currently, this is through the <code>context</code>, but this isn't threadlocal data I hear you say? Well, it'd also be wrong to pass the schema through the <code>data_dict</code>, because the schema will be validating the <code>data_dict</code> right? So unless there is some extra code to pop the schema from the <code>data_dict</code>, it was easier just to jam it in the <code>context</code>.</p>
<p>So some of our options could be.</p>
<ul>
<li>Make a <code>context</code> <code>namedtuple</code>, but change its name or properly explain what the hell this thing is in the documentation</li>
<li>Think about whether we want to include request info into the <code>context</code>, I know some actions have <code>context['for_view']</code> for some reason or another.</li>
<li>Get rid of <code>context</code>. This means we'd have to have our own <code>ckan.g</code> threadlocal thing (to move off pylons one and onto flask or whatever) that we can place the username/request in. but eww this is gross</li>
<li>Get rid of <code>context.model</code> and <code>context session. Let people use </code>ckan.model<code>and</code>model.session`, I end up having to import both of these into extensions anyway and people won't have to think about context anymore.</li>
<li>Get rid of <code>context['user']</code> by having helper functions <code>get_current_username</code> or something which behind the scenes gets the username from pylons.c.user or whatever(if we ever change to something else)</li>
<li>Model and session should be optional parameters where their default arguments are ckan.model and can.model.session so the caller doesn't have to specify them each time they use an action function.</li>
<li>Continue to make blog posts like these but never have the time to change anything anyway.</li>
</ul>
<p>I'm thinking currently that I like helpers get_current_username as it can be mocked out in tests and users of our code won't need to think of this crap and just call toolkit.get_current_username in their code, and I also like just letting them use model.Session because they won't sit their thinking &lsquo;wtf is this context thing&rsquo; whenever they want to call an action function in their extension, but I haven't really thought any of this through fully.</p>
<p>Perhaps the best way is to try and change the action functions so session and user are just passed in as normal parameters but have them default to model.Session?</p>
<p><strong>TL;DR</strong> I'm sure I'll change my mind by next month, but generally, we should change context so that it's not baffling to the user. I think by hiding from the user entirely, but we could change it to a namedtuple and documenting what the hell it actually is, or just making them non confusing normal parameters. I'm sure in a years time, the state of this will not have changed.</p>
<p>This post is constructed from my posts on <a href="https://github.com/ckan/ideas-and-roadmap/issues/53#issuecomment-74453555">ckan/ideas-and-roadmap#53</a></p>
]]></content>
		</item>
		
		<item>
			<title>CKAN Developer Discovers C Headers</title>
			<link>https://the.chuntering.dev/posts/ckan-developer-discovers-c-headers/</link>
			<pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/ckan-developer-discovers-c-headers/</guid>
			<description>At some point at university I borrowed, read a tiny amount of and got fined for the late return of Large Scale C++ software design. I think somewhere at the beginning there was a section on using headers to avoid circular imports. ckan is a large enough project that we can learn a thing or two here.
So we have a ckan python style guide, where we used to recommend avoiding</description>
			<content type="html"><![CDATA[<p>At some point at university I borrowed, read a tiny amount of and got fined for the late return of Large Scale C++ software design. I think somewhere at the beginning there was a section on using headers to avoid circular imports. ckan is a large enough project that we can learn a thing or two here.</p>
<p>So we have a ckan python style guide, where we used to recommend avoiding</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">blah</span> <span class="kn">import</span> <span class="n">banana</span>
</code></pre></div><p>style imports and instead recommended</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">blah.banana</span> <span class="kn">as</span> <span class="nn">banana</span>
</code></pre></div><p>Eventually we decided to allow from imports, because the above is ugly, but the docs were updated to include some additional rules about what you can and cannot import to avoid circular imports.</p>
<p>ckan.model often gets imported all over the shop and I believe it was the cause of many circular import problems. Stuff like <code>get_action</code> ended up creating stuff to get around it. A simple example of ckan.model ending up everywhere would be importing</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">ckan.logic</span> <span class="kn">import</span> <span class="n">schema</span>
</code></pre></div><p>schema would contain all the action functions (<code>schema.default_show_package_schema</code>, etc), but it also has <code>schema.model</code> (really <code>ckan.model</code>), <code>schema.maintain</code> (<code>ckan.lib.maintain</code>). These are all implementation details of the schema functions <code>default_show_package_schema</code> etc.</p>
<p><img src="/current_schema-fs8.png" alt="current schema"></p>
<p>What if we changed ckan/logic/schema.py so that it imports only the action function into it?</p>
<p><img src="/new_schema.png" alt="new schema"></p>
<p>This way when user of the code import the schema functions,</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">ckan.logic</span> <span class="kn">import</span> <span class="n">schema</span>
</code></pre></div><p>schema will have a list of functions without dirtying up their namespace with implementation details of ckan.model/maintain/whatever. We already do this for the models, as I think this is more standard for code that uses sqlalchemy, but we should really do this everywhere.</p>
<p>Seeing as many people write extensions for ckan we really should be doing this to define a good interface for people to use without exposing internal details to them when they import a module.</p>
<p>I see this as similar-ish to having a .h header and a .c file in C. We're hiding the implementation details from ckan.logic.schema by only allowing imports from elsewhere. Will this solve the circular import issues ckan had before? I don't know, but it feels better than</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">ckan.model</span> <span class="kn">as</span> <span class="nn">model</span>
<span class="kn">import</span> <span class="nn">ckan.helpers</span> <span class="kn">as</span> <span class="nn">helpers</span>
<span class="o">.</span><span class="o">.</span><span class="o">.</span>
</code></pre></div><p>everywhere.</p>
]]></content>
		</item>
		
		<item>
			<title>CKAN Sqlalchemy and Detached Instance Errors</title>
			<link>https://the.chuntering.dev/posts/ckan-sqlalchemy-and-detached-instance-errors/</link>
			<pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/ckan-sqlalchemy-and-detached-instance-errors/</guid>
			<description>We don&#39;t know how to use SQLAlchemy sessions We use sqlalchemy in ckan and often we run into problems with DetachedInstanceErrors. For this reason, we normally jam all the data from a model object into a dictionary to avoid getting the DetachedInstanceError. This isn&#39;t sqlachemy&#39;s fault, it&#39;s more than likely that we are just incapable of using it properly.
For a while, we kept on running into issues where paster db clean would hang and I spent a while trying to figure out what the hell was going on and what was wrong with the session.</description>
			<content type="html"><![CDATA[<h2 id="we-dont-know-how-to-use-sqlalchemy-sessions">We don't know how to use SQLAlchemy sessions</h2>
<p>We use sqlalchemy in ckan and often we run into problems with <code>DetachedInstanceErrors</code>. For this reason, we normally jam all the data from a model object into a dictionary to avoid getting the <code>DetachedInstanceError</code>. This isn't sqlachemy's fault, it's more than likely that we are just incapable of using it properly.</p>
<p>For a while, we kept on running into issues where <code>paster db clean</code> would hang and I spent a while trying to figure out what the hell was going on and what was wrong with the session.</p>
<p>As it turned out, there was nothing wrong session really, it was just that we were handling it badly for command line functions. There were basically 2 problems.</p>
<ol>
<li>Not closing transactions that are implicity opened by sqlalchemy</li>
<li>Closing and removing a session and then attempting to use the sqlalchemy objects from that session causing DetachedInstanceErrors</li>
</ol>
<p>To demonstrate this, we're going to use do some fiddling with ckan from the ipython command line shell. We'll start by basically running through ckan's database initialisation code, but we'll pass in <code>echo=True</code>, so that all the SQL statements that are execute are echoed onto the command line.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span><span class="p">,</span> <span class="n">orm</span>  
 <span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">ckan</span> <span class="kn">import</span> <span class="n">model</span>  
 <span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">ckan.logic</span> <span class="kn">import</span> <span class="n">get_action</span>  
 <span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="p">:</span> <span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">postgresql://ckan_default:pass@localhost/ckan_default</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">echo</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  
 <span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="p">:</span> <span class="n">model</span><span class="o">.</span><span class="n">init_model</span><span class="p">(</span><span class="n">engine</span><span class="p">)</span>  
 <span class="o">&lt;</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">snip</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="o">&gt;</span>      
 <span class="mi">2014</span><span class="o">-</span><span class="mo">05</span><span class="o">-</span><span class="mi">21</span> <span class="mi">12</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span><span class="mi">892</span> <span class="n">INFO</span> <span class="n">sqlalchemy</span><span class="o">.</span><span class="n">engine</span><span class="o">.</span><span class="n">base</span><span class="o">.</span><span class="n">Engine</span> <span class="p">{</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">table_oid</span><span class="s1">&#39;</span><span class="p">:</span> <span class="mi">641922</span><span class="p">}</span>  
 <span class="o">&lt;</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="n">snip</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="o">&gt;</span>      
</code></pre></div><p>So we're not actually connected to the database yet, sqlalchemy will connect when we issue a query to it.</p>
<pre><code class="language-pythong" data-lang="pythong"> In [6]: dataset = model.Session.query(model.Package).all()[0]  
 2014-05-21 12:31:54,778 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)  
 2014-05-21 12:31:54,781 INFO sqlalchemy.engine.base.Engine SELECT package.id AS package_id, package.name AS package_name, package.title AS package_title, package.version AS package_version, package.url AS package_url, package.author AS package_author, package.author_email AS package_author_email, package.maintainer AS package_maintainer, package.maintainer_email AS package_maintainer_email, package.notes AS package_notes, package.license_id AS package_license_id, package.type AS package_type, package.owner_org AS package_owner_org, package.creator_user_id AS package_creator_user_id, package.metadata_modified AS package_metadata_modified, package.private AS package_private, package.state AS package_state, package.revision_id AS package_revision_id   
 FROM package ORDER BY package.name  
 2014-05-21 12:31:54,781 INFO sqlalchemy.engine.base.Engine {}  
 In [7]: dataset  
 Out[7]: &lt;Package id=65a809dc-dd5b-4995-9cb5-1148bc59e385 name=test title=test version= url= author= author_email= maintainer= maintainer_email= notes= license_id=notspecified type=dataset owner_org=None creator_user_id=06d200b6-cd31-4b9e-93fc-c951a5d9e4ef metadata_modified=2014-05-21 11:31:23.744824 private=False state=active revision_id=b2d05bd7-86fb-409d-8d07-85a24d0c2f6c&gt;  
</code></pre><p>Notice the implicit <code>BEGIN</code>, even though we only executed a select. SQLAlchemy will always wrap our sessions in transactions for us when using the ORM. It is this transaction that we generally do not close when we fetch config options from the database, or fetch the site user. Normally this would be ok, but for example when running <code>paster db clean</code>, the metadata gets binded again and the call to <a href="https://github.com/ckan/ckan/blob/master/ckan/model/__init__.py#L233">reflect</a> causes a new connection to be created as we are already in a transaction. Since the previous transaction has a lock on the database this causes our problem 1, and <code>paster db clean</code> hangs. If you're really interested you can look at the issues on github here(<a href="https://github.com/ckan/ckan/pull/1656">#1656</a>, <a href="https://github.com/ckan/ckan/pull/1123">#1123</a>).</p>
<p>We'll run into our second problem next.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="p">:</span> <span class="n">model</span><span class="o">.</span><span class="n">Session</span><span class="o">.</span><span class="n">registry</span><span class="o">.</span><span class="n">has</span><span class="p">(</span><span class="p">)</span>  
 <span class="n">Out</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="p">:</span> <span class="bp">True</span>  
</code></pre></div><p>Our Session registry currently has an active session. Of which our dataset object is a part of, next we run <code>get_site_user</code>.</p>
<pre><code class="language-pythong" data-lang="pythong"> In [9]: get_action('get_site_user')({'model': model, 'ignore_auth': True}, {})  
 /home/joe/projects/okf/lib/python2.7/site-packages/sqlalchemy/engine/default.py:475: SAWarning: Unicode type received non-unicode bind param value.  
  processors[key](compiled_params[key])  
 2014-05-21 12:32:28,396 INFO sqlalchemy.engine.base.Engine SELECT &quot;user&quot;.password AS user_password, &quot;user&quot;.id AS user_id, &quot;user&quot;.name AS user_name, &quot;user&quot;.openid AS user_openid, &quot;user&quot;.fullname AS user_fullname, &quot;user&quot;.email AS user_email, &quot;user&quot;.apikey AS user_apikey, &quot;user&quot;.created AS user_created, &quot;user&quot;.reset_key AS user_reset_key, &quot;user&quot;.about AS user_about, &quot;user&quot;.activity_streams_email_notifications AS user_activity_streams_email_notifications, &quot;user&quot;.sysadmin AS user_sysadmin, &quot;user&quot;.state AS user_state   
 FROM &quot;user&quot;   
 WHERE &quot;user&quot;.name = %(name_1)s OR &quot;user&quot;.openid = %(openid_1)s OR &quot;user&quot;.id = %(id_1)s ORDER BY &quot;user&quot;.name   
  LIMIT %(param_1)s  
 2014-05-21 12:32:28,396 INFO sqlalchemy.engine.base.Engine {'id_1': 'ckan_site_user', 'name_1': 'ckan_site_user', 'param_1': 1, 'openid_1': 'ckan_site_user'}  
 2014-05-21 12:32:28,401 INFO sqlalchemy.engine.base.Engine INSERT INTO &quot;user&quot; (id, name, openid, password, fullname, email, apikey, created, reset_key, about, activity_streams_email_notifications, sysadmin, state) VALUES (%(id)s, %(name)s, %(openid)s, %(password)s, %(fullname)s, %(email)s, %(apikey)s, %(created)s, %(reset_key)s, %(about)s, %(activity_streams_email_notifications)s, %(sysadmin)s, %(state)s)  
 2014-05-21 12:32:28,401 INFO sqlalchemy.engine.base.Engine {'openid': None, 'about': None, 'apikey': '6a717fec-17af-44b7-b10b-c444656341db', 'name': 'ckan_site_user', 'created': datetime.datetime(2014, 5, 21, 12, 32, 28, 401059), 'reset_key': None, 'email': None, 'sysadmin': True, 'activity_streams_email_notifications': False, 'state': u'active', 'fullname': None, 'password': u'', 'id': u'f38f3148-3ab0-4de2-91be-393fad2ca1dd'}  
 2014-05-21 12:32:28,402 INFO sqlalchemy.engine.base.Engine COMMIT  
 Out[9]: {'apikey': '6a717fec-17af-44b7-b10b-c444656341db', 'name': 'ckan_site_user'}  
 In [10]: model.Session.registry.has()  
 Out[10]: False  
</code></pre><p><a href="https://github.com/ckan/ckan/blob/master/ckan/logic/action/get.py#L2064"><code>get_site_user</code> not only commits, but removes the session and closes the session's connection</a>. Our registry is now closed.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="p">:</span> <span class="n">dataset</span><span class="o">.</span><span class="n">revision</span>  
 <span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span><span class="o">-</span>  
 <span class="n">DetachedInstanceError</span><span class="p">:</span> <span class="n">Parent</span> <span class="n">instance</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Package</span> <span class="n">at</span> <span class="mh">0x493e850</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">bound</span> <span class="n">to</span> <span class="n">a</span> <span class="n">Session</span><span class="p">;</span> <span class="n">lazy</span> <span class="n">load</span> <span class="n">operation</span> <span class="n">of</span> <span class="n">attribute</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">revision</span><span class="s1">&#39;</span> <span class="n">cannot</span> <span class="n">proceed</span>
</code></pre></div><p>If we now try to use any ORM related features of our object, such as following a relation, we'll get a DetachedInstanceError. In the case of ckanext spatial this is caused by the <a href="https://github.com/ckan/ckanext-spatial/blob/fa4161af8714106e10b724afe775674473993e9c/ckanext/spatial/harvesters/base.py#L411"><code>previous_object</code></a> becoming detached as <a href="https://github.com/ckan/ckanext-spatial/blob/fa4161af8714106e10b724afe775674473993e9c/ckanext/spatial/harvesters/base.py#L418"><code>get_site_user</code></a> is called after it. When the previous_object is used later, probably here as it tries to get the HarvestJob object it'll fail, accessing other stuff like previous_object.current will work fine as it doesn't have to goto the database to fetch a related object.</p>
<p>So we ended up having to fix the first problem by closing the transactions by <code>get_site_user</code> and <a href="https://github.com/ckan/ckan/blob/master/ckan/model/system_info.py#L31"><code>get_system_info</code></a>, and we could do something like a model.Session.remove() before the <code>drop_all</code> in <code>clean_db</code>, (we do a similar thing in <code>delete_all()</code>)</p>
<p>The second problem was fixed by changing <code>get_site_user</code> to only commit and not remove the session.</p>
<p>These two problems were fixed in 2.1.3 and 2.2.1 onwards so hopefully you'll never have to run into them.</p>
<p>This post is basically <a href="https://github.com/ckan/ckan/pull/1714#issuecomment-43745098">ckan/ckan#1714</a></p>
]]></content>
		</item>
		
		<item>
			<title>Python Programmer Discovers Functional Programming. World Keeps Turning</title>
			<link>https://the.chuntering.dev/posts/python-programmer-discovers-functional/</link>
			<pubDate>Fri, 23 Sep 2011 00:00:00 +0000</pubDate>
			
			<guid>https://the.chuntering.dev/posts/python-programmer-discovers-functional/</guid>
			<description>Handling time series data using python’s builtin datastructures is a bitch. I guess the best way would be to just use a library like pandas, but a colleague came across the way I’d handled it in this code snippet using itertools and functools and asked me to share it with the rest of the team.  I’ll just concentrate on the parts which require more explanation. The most complex line to understand is line 24</description>
			<content type="html"><![CDATA[<p>Handling time series data using python’s builtin datastructures is a bitch. I guess the best way would be to just use a library like <code>pandas</code>, but a colleague came across the way I’d handled it in this code snippet using itertools and functools and asked me to share it with the rest of the team.
<script type="application/javascript" src="https://gist.github.com/joetsoi/1235081.js"></script>

I’ll just concentrate on the parts which require more explanation. The most complex line to understand is line 24</p>
<h2 id="list-comprehensions-and-python-switch">List comprehensions and python ‘switch’</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">row</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="p">[</span> <span class="p">(</span><span class="n">option</span><span class="p">,</span> <span class="n">function_dict</span><span class="p">[</span><span class="n">option</span><span class="p">]</span><span class="p">(</span><span class="n">series</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">list</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span><span class="p">)</span> <span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="n">table_options</span> <span class="p">]</span><span class="p">)</span>  
</code></pre></div><p>The dict function can build dictionaries in a variety of ways, a list pairs in my case, that I build using a list comprehension. The second element of each pair is built by calling a function from a dictionary of functions. This is my prefered way of emulating the switch statement in python, with each option in table_option acting as each individual ‘case’ statement selector.</p>
<p>One of the guys here prefers a series of ‘if/else’s but I prefer the one hash lookup to possibly evaluating every single if condition. It also can start to look ugly and python’s if/else doesn’t declare a new scope.</p>
<h2 id="itertools--takewhile-dropwhile">itertools : takewhile, dropwhile</h2>
<p>Each function in the hopefully obviously named function_dict is a simple function that calculates the day/week/month change or year high/low. The week and month calculation are quite fun, it’s just the difference between two prices, but the second price is calculated by iterating over the series using <code>dropwhile</code> until the condition <code>is_same_month</code> met. Then getting the next element. This avoids iterating over the whole series whilst avoiding problems of sparse weeks (bank holidays or royal weddings for example).
The year lambda function takes the low and high from the series where they are in the same year. Notice how similar that sentence is to the actual function</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="k">lambda</span> <span class="n">series</span><span class="p">:</span> <span class="n">low_high</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">price</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">takewhile</span><span class="p">(</span><span class="n">is_same_year</span><span class="p">,</span> <span class="n">series</span><span class="p">)</span><span class="p">)</span>  
</code></pre></div><p>I guess that’s why I like things like <code>takewhile</code>.
<code>low_high</code> is just a wrapper around the builtin <code>min</code> and <code>max</code>.</p>
<h2 id="partial-application-in-functools">Partial application in functools</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">is_same_month</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="k">lambda</span> <span class="n">date</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="n">i</span><span class="o">.</span><span class="n">datestamp</span> <span class="o">&lt;</span> <span class="n">date</span><span class="p">,</span> <span class="n">context</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">date</span><span class="s1">&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">weeks</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span><span class="p">)</span>  
</code></pre></div><p>The functions <code>is_same_week</code>/<code>is_same_month</code> are partially applied lambda functions. Lambda functions can’t take variables from the surrounding scope so we use partial from functools to partially apply the function and fill the parameter with date from the django template context so we can fix the ‘same date’ to a specific one.</p>
<h3 id="readability">Readability</h3>
<p>If you’ve dabbled with functional programming, like I’ve tried to you should be quite happy with these concepts. Another thing to note is I used a plain for loop when iterating over <code>series_set</code>. I’ve tried refactoring it into a list comprehension, but I didn’t want to end up with a nested listed comprehension and readibilty won out. Also List comprehensions <a href="http://python-history.blogspot.com/2010/06/from-list-comprehensions-to-generator.html">‘leak’ variables</a>.</p>
]]></content>
		</item>
		
	</channel>
</rss>
