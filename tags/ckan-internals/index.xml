<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ckan Internals on Joe T</title>
    <link>https://the.chuntering.dev/tags/ckan-internals/</link>
    <description>Recent content in Ckan Internals on Joe T</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 17 Feb 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://the.chuntering.dev/tags/ckan-internals/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WTF is this context thing in CKAN?</title>
      <link>https://the.chuntering.dev/posts/wtf-is-this-context-thing-in-ckan/</link>
      <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/wtf-is-this-context-thing-in-ckan/</guid>
      <description>If you&amp;rsquo;ve taken a look at the ckan source code, you&amp;rsquo;ll have come across &amp;lsquo;context&amp;rsquo; as the first parameter in many of the functions. It basically contains all threadlocal information required for a function to execute. It&amp;rsquo;s taken me far too long to understand why they exist and I currently think contexts in their current state are pointless.
I&amp;rsquo;m assuming contexts only contain model, session and user. I get why context exists, it basically comes down to whether</description>
    </item>
    
    <item>
      <title>CKAN Developer Discovers C Headers</title>
      <link>https://the.chuntering.dev/posts/ckan-developer-discovers-c-headers/</link>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/ckan-developer-discovers-c-headers/</guid>
      <description>At some point at university I borrowed, read a tiny amount of and got fined for the late return of Large Scale C++ software design. I think somewhere at the beginning there was a section on using headers to avoid circular imports. ckan is a large enough project that we can learn a thing or two here.
So we have a ckan python style guide, where we used to recommend avoiding</description>
    </item>
    
    <item>
      <title>CKAN Sqlalchemy and Detached Instance Errors</title>
      <link>https://the.chuntering.dev/posts/ckan-sqlalchemy-and-detached-instance-errors/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/ckan-sqlalchemy-and-detached-instance-errors/</guid>
      <description>We don&amp;rsquo;t know how to use SQLAlchemy sessions We use sqlalchemy in ckan and often we run into problems with DetachedInstanceErrors. For this reason, we normally jam all the data from a model object into a dictionary to avoid getting the DetachedInstanceError. This isn&amp;rsquo;t sqlachemy&amp;rsquo;s fault, it&amp;rsquo;s more than likely that we are just incapable of using it properly.
For a while, we kept on running into issues where paster db clean would hang and I spent a while trying to figure out what the hell was going on and what was wrong with the session.</description>
    </item>
    
  </channel>
</rss>