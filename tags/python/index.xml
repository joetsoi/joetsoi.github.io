<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Joe T</title>
    <link>https://the.chuntering.dev/tags/python/</link>
    <description>Recent content in python on Joe T</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 07 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://the.chuntering.dev/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Horrible Things I Regret Doing With Python</title>
      <link>https://the.chuntering.dev/posts/horrible-things-i-regret-doing-with-python/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/horrible-things-i-regret-doing-with-python/</guid>
      <description>Runtime Copy Paste With Global Variable Replacement. &amp;ldquo;Could you make InlineAdmin in Django paginatable Joe?&amp;rdquo; Guido asked. I googled a while before regurgitating a Stackoverflow answer into Guido&#39;s lap. &amp;ldquo;Oh cool, but we have multiple InlineAdmins, can you make it paginate for all of them?&amp;rdquo; &amp;ldquo;Sure&amp;rdquo; I replied, &amp;ldquo;That&#39;ll just be a change to the admin class and some templates&amp;rdquo;
&amp;hellip; Time passes
I had quickly changed the p variable so it was dynamically determined by the model name assigned to the InlineAdmin class by adding a page_param property.</description>
    </item>
    
    <item>
      <title>Translating Ckan Extensions Using The ITranslations Interface</title>
      <link>https://the.chuntering.dev/posts/translating-ckan-extensions-using-itranslations-interface/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/translating-ckan-extensions-using-itranslations-interface/</guid>
      <description>From ckan 2.5 onwards you will be able to translate the strings in ckan extensions in a much more friendly and easy way. Unless there are any major issues in the code review, this pull request should make your life easier.
Previously, there were a few, not ideal solutions (see ckan#959) which involved having a paster command or script that would munge all the po/mo files together using gettext&#39;s msgcat command.</description>
    </item>
    
    <item>
      <title>Digging into python memory issues in ckan with heapy</title>
      <link>https://the.chuntering.dev/posts/debugging-python-ckan-memory-issues/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/debugging-python-ckan-memory-issues/</guid>
      <description>So we had a report about a memory leak when using the ckan datastore extension, where large queries to the datastore would leak large amounts of memory per request. It wasn&#39;t simple to get to the bottom of it, at first I couldn&#39;t recreate it the leak at all. The test data I was using was the STAR experiment csv files, which I found when I googled &amp;lsquo;Large example csv files&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>WTF is this context thing in CKAN?</title>
      <link>https://the.chuntering.dev/posts/wtf-is-this-context-thing-in-ckan/</link>
      <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/wtf-is-this-context-thing-in-ckan/</guid>
      <description>If you&#39;ve taken a look at the ckan source code, you&#39;ll have come across &amp;lsquo;context&amp;rsquo; as the first parameter in many of the functions. It basically contains all threadlocal information required for a function to execute. It&#39;s taken me far too long to understand why they exist and I currently think contexts in their current state are pointless.
I&#39;m assuming contexts only contain model, session and user. I get why context exists, it basically comes down to whether</description>
    </item>
    
    <item>
      <title>CKAN Developer Discovers C Headers</title>
      <link>https://the.chuntering.dev/posts/ckan-developer-discovers-c-headers/</link>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/ckan-developer-discovers-c-headers/</guid>
      <description>At some point at university I borrowed, read a tiny amount of and got fined for the late return of Large Scale C++ software design. I think somewhere at the beginning there was a section on using headers to avoid circular imports. ckan is a large enough project that we can learn a thing or two here.
So we have a ckan python style guide, where we used to recommend avoiding</description>
    </item>
    
    <item>
      <title>CKAN Sqlalchemy and Detached Instance Errors</title>
      <link>https://the.chuntering.dev/posts/ckan-sqlalchemy-and-detached-instance-errors/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/ckan-sqlalchemy-and-detached-instance-errors/</guid>
      <description>We don&#39;t know how to use SQLAlchemy sessions We use sqlalchemy in ckan and often we run into problems with DetachedInstanceErrors. For this reason, we normally jam all the data from a model object into a dictionary to avoid getting the DetachedInstanceError. This isn&#39;t sqlachemy&#39;s fault, it&#39;s more than likely that we are just incapable of using it properly.
For a while, we kept on running into issues where paster db clean would hang and I spent a while trying to figure out what the hell was going on and what was wrong with the session.</description>
    </item>
    
    <item>
      <title>Python Programmer Discovers Functional Programming. World Keeps Turning</title>
      <link>https://the.chuntering.dev/posts/python-programmer-discovers-functional/</link>
      <pubDate>Fri, 23 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://the.chuntering.dev/posts/python-programmer-discovers-functional/</guid>
      <description>Handling time series data using python’s builtin datastructures is a bitch. I guess the best way would be to just use a library like pandas, but a colleague came across the way I’d handled it in this code snippet using itertools and functools and asked me to share it with the rest of the team.  I’ll just concentrate on the parts which require more explanation. The most complex line to understand is line 24</description>
    </item>
    
  </channel>
</rss>